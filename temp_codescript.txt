// src/app/globals.css:

/* src/app/globals.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-color: #000000; /* Color del texto en modo claro y oscuro */
  --background-color: #ffffff; /* Color de fondo en modo claro */
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-color: #000000; /* Color del texto en modo oscuro */
    --background-color: #000000; /* Color de fondo en modo oscuro */
  }
}

body {
  color: var(--foreground-color);
  background-color: var(--background-color);
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.dark body {
  color: #000000;
  background-color: #000000;
}

.leaflet-container {
  width: 100% !important;
  height: 400px !important;
}

----------------------------------------

// src/app/layout.tsx:

import React from 'react';
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import Header from '../components/Header';
import { cookies } from 'next/headers';
import { getSessionByToken } from '../../database/sessions';
import { getUserById } from '../../database/users';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Townwall',
  description: 'Connect with people locally',
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  let username = '';
  if (sessionToken) {
    const session = await getSessionByToken(sessionToken.value);
    if (session) {
      const user = await getUserById(session.userId);
      username = user.username;
    }
  }

  return (
    <html lang="en">
      <body className={inter.className}>
        <Header username={username} />
        <main className="main-content">{children}</main>
      </body>
    </html>
  );
}

----------------------------------------

// src/app/posts/[username]/[slug]/page.tsx:

import { cookies } from 'next/headers';
import { getPostByUserAndSlug } from '../../../../../database/posts';
import { getSessionByToken } from '../../../../../database/sessions';
import PostClient from './PostClient';
import React from 'react';

export default async function PostPage({
  params,
}: {
  params: { username: string; slug: string };
}) {
  const { username, slug } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const post = await getPostByUserAndSlug(username, slug);

  if (!post) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">Post not found</p>
      </div>
    );
  }

  // Include the author's username in the post data
  post.author = username;

  return <PostClient post={post} />;
}

----------------------------------------

// src/app/posts/[username]/[slug]/PostClient.tsx:

'use client';

import React, { useState, useEffect } from 'react';

type CommentType = {
  id: number;
  postId: number;
  userId: number;
  content: string;
  createdAt: Date;
};

export default function PostClient({ post }: { post: any }) {
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState('');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetch(`/api/comments?postId=${post.id}`)
      .then((response) => response.json())
      .then((data) => setComments(data))
      .catch((err) => setError('Failed to fetch comments'));
  }, [post.id]);

  const handleCommentSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    try {
      const response = await fetch('/api/comments', {
        method: 'POST',
        body: JSON.stringify({ postId: post.id, content: newComment }),
        headers: { 'Content-Type': 'application/json' },
      });

      if (!response.ok) {
        throw new Error('Failed to add comment');
      }

      const comment = await response.json();
      setComments([comment, ...comments]);
      setNewComment('');
    } catch (err) {
      setError('Failed to add comment');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900 pt-8">
      <div className="w-full max-w-3xl p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          {post.title}
        </h1>
        <p className="text-center text-gray-600 dark:text-gray-400">
          By {post.author} on {new Date(post.createdAt).toLocaleDateString()}
        </p>
        <p className="text-center text-gray-700 dark:text-gray-300">
          {post.content}
        </p>

        <hr className="my-4 border-gray-300 dark:border-gray-600" />

        <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
          Comments:
        </h2>

        <form onSubmit={handleCommentSubmit} className="space-y-4">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment"
            required
            className="w-full p-2 border border-gray-300 rounded-md"
          />
          <div className="flex justify-center">
            <button
              type="submit"
              className="w-1/2 py-2 px-4 bg-indigo-600 text-white rounded-md"
            >
              Submit
            </button>
          </div>
        </form>

        {!!error && <p className="text-red-500 text-center">{error}</p>}

        <div className="space-y-4">
          {comments.map((comment) => (
            <div key={comment.id} className="p-4 bg-gray-100 rounded-md">
              <p className="text-gray-700">{comment.content}</p>
              <small className="text-gray-500">
                {new Date(comment.createdAt).toLocaleString()}
              </small>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

