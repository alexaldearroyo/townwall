// database/comments.ts:

import { sql } from './connect';

export type Comment = {
  id: number;
  postId: number;
  userId: number;
  content: string;
  createdAt: Date;
};

export type ProfileComment = {
  id: number;
  profileId: number;
  userId: number;
  content: string;
  createdAt: Date;
  username: string;
  userImage: string;
};

export async function createComment(
  postId: number,
  userId: number,
  content: string,
): Promise<Comment> {
  const [comment] = await sql<
    {
      id: number;
      postId: number;
      userId: number;
      content: string;
      createdAt: Date | null;
    }[]
  >`
    INSERT INTO
      comments (post_id, user_id, content)
    VALUES
      (
        ${postId},
        ${userId},
        ${content}
      )
    RETURNING
      id,
      post_id AS "postId",
      user_id AS "userId",
      content,
      created_at AS "createdAt"
  `;
  if (comment === undefined) {
    throw new Error('Comment not found');
  }
  return comment as Comment;
}

export function getCommentsByPostId(postId: number): Promise<Comment[]> {
  return sql<Comment[]>`
    SELECT
      comments.id,
      comments.post_id AS "postId",
      comments.user_id AS "userId",
      comments.content,
      comments.created_at AS "createdAt",
      users.username -- Agregar el username aqu√≠
    FROM
      comments
      JOIN users ON comments.user_id = users.id -- Asegurarse de hacer el join con la tabla de usuarios
    WHERE
      comments.post_id = ${postId}
    ORDER BY
      comments.created_at DESC
  `;
}

export async function createProfileComment(
  profileUserId: number,
  userId: number,
  content: string,
): Promise<ProfileComment> {
  try {
    // Validar si el profileUserId existe en la tabla users
    const user = await sql<{ id: number }[]>`
      SELECT
        id
      FROM
        users
      WHERE
        id = ${profileUserId}
    `;

    if (user.length === 0) {
      throw new Error(
        `El user_id ${profileUserId} no existe en la tabla users.`,
      );
    }

    const [comment] = await sql<ProfileComment[]>`
      INSERT INTO
        profile_comments (
          user_id,
          commenter_id,
          content
        )
      VALUES
        (
          ${profileUserId},
          ${userId},
          ${content}
        )
      RETURNING
        id,
        user_id AS "userId",
        commenter_id AS "commenterId",
        content,
        created_at AS "createdAt",
        (
          SELECT
            username
          FROM
            users
          WHERE
            id = ${userId}
        ) AS "username",
        (
          SELECT
            user_image
          FROM
            users
          WHERE
            id = ${userId}
        ) AS "userImage"
    `;

    if (!comment) {
      throw new Error('Failed to create profile comment');
    }

    return comment;
  } catch (error) {
    if (
      error instanceof Error &&
      error.message.includes('violates foreign key constraint')
    ) {
      throw new Error(
        `El user_id ${profileUserId} no existe en la tabla users.`,
      );
    } else {
      throw error;
    }
  }
}

export function getCommentsByProfileUserId(
  profileUserId: number,
): Promise<ProfileComment[]> {
  return sql<ProfileComment[]>`
    SELECT
      profile_comments.id,
      profile_comments.user_id AS "userId",
      profile_comments.commenter_id AS "commenterId",
      profile_comments.content,
      profile_comments.created_at AS "createdAt",
      users.username,
      users.user_image AS "userImage"
    FROM
      profile_comments
      JOIN users ON profile_comments.commenter_id = users.id
    WHERE
      profile_comments.user_id = ${profileUserId}
    ORDER BY
      profile_comments.created_at DESC
  `;
}

----------------------------------------

// database/connect.ts:

import { unstable_noStore as noStore } from 'next/cache';
import postgres, { Sql } from 'postgres';
import postgresConfig from '../ley.config.js';
import { setEnvironmentVariables } from '../util/config.js';

setEnvironmentVariables();

declare module globalThis {
  let postgresSqlClient: Sql;
}

function connectOneTimeToDatabase() {
  if (!('postgresSqlClient' in globalThis)) {
    globalThis.postgresSqlClient = postgres(postgresConfig);
  }

  return ((
    ...sqlParameters: Parameters<typeof globalThis.postgresSqlClient>
  ) => {
    noStore();
    return globalThis.postgresSqlClient(...sqlParameters);
  }) as typeof globalThis.postgresSqlClient;
}

export const sql = connectOneTimeToDatabase();

----------------------------------------

// database/follows.ts:

import { sql } from './connect';

export async function followUser(followerId: number, followedId: number) {
  await sql`
    INSERT INTO
      follows (follower_id, followed_id)
    VALUES
      (
        ${followerId},
        ${followedId}
      )
  `;
}

export async function unfollowUser(followerId: number, followedId: number) {
  await sql`
    DELETE FROM follows
    WHERE
      follower_id = ${followerId}
      AND followed_id = ${followedId}
  `;
}

export async function getFollowers(userId: number) {
  return await sql<
    {
      id: number;
      username: string;
      email: string;
      passwordHash: string;
      profileId: number;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: unknown | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      users.*
    FROM
      users
      JOIN follows ON users.id = follows.follower_id
    WHERE
      follows.followed_id = ${userId}
  `;
}

export async function getFollowing(userId: number) {
  return await sql<
    {
      id: number;
      username: string;
      email: string;
      passwordHash: string;
      profileId: number;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: unknown | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      users.*
    FROM
      users
      JOIN follows ON users.id = follows.followed_id
    WHERE
      follows.follower_id = ${userId}
  `;
}

export async function getFollowingUsers(userId: number) {
  return await sql<
    { id: number; username: string; email: string; userImage: string }[]
  >`
    SELECT
      users.id,
      users.username,
      users.email,
      users.user_image AS "userImage"
    FROM
      users
      JOIN follows ON users.id = follows.followed_id
    WHERE
      follows.follower_id = ${userId}
  `;
}

----------------------------------------

// database/posts.ts:

import { sql } from './connect';

export type Post = {
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId?: string | number | null;
  createdAt: Date;
  updatedAt: Date | null;
  slug: string;
};

export async function getPostById(postId: number) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      id = ${postId}
  `;
  return posts[0];
}

export async function getPostsByUserId(userId: number) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      user_id = ${userId}
  `;
  return posts;
}

export async function getPostByUserAndId(slug: string) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      slug = ${slug}
  `;
  return posts[0];
}

export async function createPost(
  userId: number,
  title: string,
  content: string,
  slug: string,
  icon: string = '',
  categoryId?: number,
): Promise<Post> {
  const [post] = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    INSERT INTO
      posts (
        user_id,
        icon,
        title,
        content,
        category_id,
        slug
      )
    VALUES
      (
        ${userId},
        ${icon || null},
        ${title},
        ${content},
        ${categoryId ?? null},
        ${slug}
      )
    RETURNING
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
  `;

  if (!post) {
    throw new Error('Failed to create post');
  }

  const createdAt = new Date(post.createdAt);
  const updatedAt = post.updatedAt ? new Date(post.updatedAt) : new Date();

  const result: Post = {
    ...post,
    createdAt,
    updatedAt,
  };

  return result;
}

export async function getPostByUserAndSlug(username: string, slug: string) {
  const posts = await sql<
    {
      [x: string]: string;
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      p.id,
      p.user_id AS "userId",
      p.icon,
      p.title,
      p.content,
      p.category_id AS "categoryId",
      p.created_at AS "createdAt",
      p.updated_at AS "updatedAt",
      p.slug
    FROM
      posts p
      JOIN users u ON p.user_id = u.id
    WHERE
      u.username = ${username}
      AND p.slug = ${slug}
  `;
  return posts[0];
}

----------------------------------------

// database/sessions.ts:

import { sql } from './connect';
import crypto from 'node:crypto';

export type Session = {
  id: number;
  userId: number;
  token: string;
  createdAt: Date;
  expiresAt: Date;
};

export async function createSession(userId: number): Promise<Session> {
  const token = crypto.randomBytes(32).toString('hex');
  const expiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24);

  const [session] = await sql<
    {
      id: number;
      userId: number;
      token: string;
      createdAt: Date;
      expiresAt: Date;
    }[]
  >`
    INSERT INTO
      sessions (user_id, token, expires_at)
    VALUES
      (
        ${userId},
        ${token},
        ${expiresAt}
      )
    RETURNING
      id,
      user_id AS "userId",
      token,
      created_at AS "createdAt",
      expires_at AS "expiresAt"
  `;

  if (!session) {
    throw new Error('Session creation failed');
  }

  return {
    id: session.id,
    userId: session.userId,
    token: session.token,
    createdAt: session.createdAt,
    expiresAt: session.expiresAt,
  };
}

export async function getSessionByToken(
  token: string,
): Promise<Session | null> {
  const [session] = await sql<
    {
      id: number;
      userId: number;
      token: string;
      createdAt: Date;
      expiresAt: Date;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      token,
      created_at AS "createdAt",
      expires_at AS "expiresAt"
    FROM
      sessions
    WHERE
      token = ${token}
  `;

  return session
    ? {
        id: session.id,
        userId: session.userId,
        token: session.token,
        createdAt: session.createdAt,
        expiresAt: session.expiresAt,
      }
    : null;
}

export async function deleteSessionByToken(token: string): Promise<void> {
  await sql`
    DELETE FROM sessions
    WHERE
      token = ${token}
  `;
}

----------------------------------------

// database/users.ts:

import { sql } from './connect';
import bcrypt from 'bcrypt';

const animalEmojis = [
  'üê∂',
  'üê±',
  'üê≠',
  'üêπ',
  'üê∞',
  'ü¶ä',
  'üêª',
  'üêº',
  'üê®',
  'üêØ',
  'ü¶Å',
  'üêÆ',
  'üê∑',
  'üê∏',
  'üêô',
];

export type User = {
  id: number;
  username: string;
  passwordHash: string;
  userImage: string | null;
  email: string;
  fullName?: string | null;
  description?: string | null;
  interests?: string | null;
  profileLinks?: string | null;
  location?: { x: number; y: number } | null | unknown;
  birthdate?: Date | null;
  profession?: string | null;
  createdAt?: Date | null;
  updatedAt?: Date | null;
  profileId: number;
  slug: string;
};

export type UserProfile = {
  id: number;
  username: string;
  email: string;
  fullName: string | null;
  description: string | null;
  interests: string | null;
  profileLinks: string | null;
  userImage: string | null;
  location: { x: number; y: number } | null;
  birthdate: Date | null;
  profession: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  profileId: number;
  slug: string;
};

export async function createUser(
  username: string,
  password: string,
  email: string,
  profileId: number,
  slug: string,
  location: { x: number; y: number },
): Promise<User> {
  const passwordHash = await bcrypt.hash(password, 10);
  const randomEmoji =
    animalEmojis[Math.floor(Math.random() * animalEmojis.length)] || '';

  const users = await sql<
    {
      id: number;
      username: string;
      passwordHash: string;
      userImage: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      location: string | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    INSERT INTO
      users (
        username,
        password_hash,
        user_image,
        email,
        profile_id,
        slug,
        location
      )
    VALUES
      (
        ${username},
        ${passwordHash},
        ${randomEmoji},
        ${email},
        ${profileId},
        ${slug},
        st_setsrid (
          st_point (
            ${location.x},
            ${location.y}
          ),
          4326
        )
      )
    RETURNING
      id,
      username,
      password_hash AS "passwordHash",
      user_image AS "userImage",
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      st_astext (location) AS "location",
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
  `;

  if (users.length === 0) {
    throw new Error('User creation failed');
  }

  const user = users[0] as User;
  if (user.location) {
    user.location = parseLocation(user.location as string);
  }
  return user;
}

export async function getUserByUsername(
  username: string,
): Promise<User | undefined> {
  const users = await sql<
    {
      id: number;
      username: string;
      passwordHash: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: unknown | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    SELECT
      id,
      username,
      password_hash AS "passwordHash",
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      user_image AS "userImage",
      st_astext (location) AS "location",
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
    FROM
      users
    WHERE
      username = ${username}
  `;

  if (users.length === 0) {
    return undefined;
  }

  const user = users[0];
  if (user) {
    user.location = user.location
      ? parseLocation(user.location as string)
      : null;
  }

  return user;
}

// Function to get a user by their ID
export async function getUserById(id: number): Promise<User> {
  const users = await sql<
    {
      id: number;
      username: string;
      passwordHash: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: unknown | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    SELECT
      id,
      username,
      password_hash AS "passwordHash",
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      user_image AS "userImage",
      st_astext (location) AS "location",
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
    FROM
      users
    WHERE
      id = ${id}
  `;

  if (users.length === 0) {
    throw new Error(`User with username ${id} not found`);
  }

  const user = users[0];
  if (!user) {
    throw new Error(`User with username ${id} not found`);
  }

  user.location = user.location ? parseLocation(user.location as string) : null;

  return user;
}

// Function to delete a user by their ID
export async function deleteUserById(id: number): Promise<void> {
  await sql`
    DELETE FROM users
    WHERE
      id = ${id}
  `;
}

// Function to update user profile
export async function updateUserProfile(
  userId: number,
  profileData: Partial<UserProfile>,
): Promise<UserProfile> {
  const birthdateValue = profileData.birthdate
    ? `to_date('${new Date(profileData.birthdate).toISOString().split('T')[0]}', 'YYYY-MM-DD')`
    : null;
  const locationValue = profileData.location
    ? `ST_SetSRID(ST_Point(${profileData.location.x}, ${profileData.location.y}), 4326)`
    : null;
  const users = await sql<
    {
      id: number;
      username: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: string | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    UPDATE users
    SET
      full_name = coalesce(
        ${profileData.fullName ?? 'null'},
        full_name
      ),
      description = coalesce(
        ${profileData.description ?? 'null'},
        description
      ),
      interests = coalesce(
        ${profileData.interests ?? 'null'},
        interests
      ),
      profile_links = coalesce(
        ${profileData.profileLinks ?? 'null'},
        profile_links
      ),
      user_image = coalesce(
        ${profileData.userImage ?? 'null'},
        user_image
      ),
      location = coalesce(
        ${locationValue}::geometry,
        location
      ),
      birthdate = coalesce(
        ${birthdateValue}::date,
        birthdate
      ),
      profession = coalesce(
        ${profileData.profession ?? 'null'},
        profession
      ),
      updated_at = now()
    WHERE
      id = ${userId}
    RETURNING
      id,
      username,
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      user_image AS "userImage",
      st_astext (location) AS "location",
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
  `;

  const updatedUser = users[0];

  if (!updatedUser) {
    throw new Error('Profile update failed');
  }

  if (updatedUser.location) {
    const parsedLocation = parseLocation(updatedUser.location);
    updatedUser.location = parsedLocation
      ? JSON.stringify(parsedLocation)
      : null;
  }

  return updatedUser as UserProfile;
}

// Helper function to parse location from string to { x: number; y: number }
export function parseLocation(
  locationString: string,
): { x: number; y: number } | null {
  const match = locationString.match(/POINT\(([-\d.]+) ([-\d.]+)\)/);
  if (!match) {
    return null;
  }
  const [, x, y] = match;
  return { x: parseFloat(x || '0'), y: parseFloat(y || '0') };
}

----------------------------------------

