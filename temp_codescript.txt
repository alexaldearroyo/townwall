// src/app/(auth)/register/RegisterForm.tsx:

// src/app/(auth)/register/RegisterForm.tsx

'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function RegisterForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);

  async function handleRegister(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();

    const response = await fetch('/api/register', {
      method: 'POST',
      body: JSON.stringify({ username, password }),
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const data = response.ok ? await response.json() : null;

    if (response.ok) {
      setError('User registered successfully');
      await new Promise((resolve) => setTimeout(resolve, 2000));
      router.push('/login');
    } else {
      setError(data ? data.errors[0].message : 'Invalid username or password');
    }
  }

  return (
    <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
      <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
        Sign Up
      </h1>
      <form onSubmit={handleRegister} className="space-y-6">
        {!!error && <p className="text-red-500">{error}</p>}
        <div>
          <label
            htmlFor="username"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Username
          </label>
          <input
            id="username"
            name="username"
            placeholder="Username"
            value={username}
            onChange={(event) => setUsername(event.currentTarget.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            required
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Password
          </label>
          <input
            id="password"
            name="password"
            type="password"
            placeholder="Password"
            value={password}
            onChange={(event) => setPassword(event.currentTarget.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            required
          />
        </div>
        <div>
          <button
            type="submit"
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Sign Up
          </button>
        </div>
      </form>
    </div>
  );
}

----------------------------------------

// src/app/(auth)/register/page.tsx:

// src/app/(auth)/register/page.tsx

'use client';

import RegisterForm from './RegisterForm';

export default function RegisterPage() {
  return (
    <div className="main-content form-container bg-white dark:bg-gray-900">
      <RegisterForm />
    </div>
  );
}

----------------------------------------

// src/app/(auth)/api/delete/route.ts:

// src/app/(auth)/api/delete/route.ts

import { NextResponse } from 'next/server';
import { getUserById, deleteUserById } from '../../../../../database/users';
import {
  getSessionByToken,
  deleteSessionByToken,
} from '../../../../../database/sessions';

export async function POST(request: Request) {
  const cookieHeader = request.headers.get('cookie');
  const cookies = new Map(
    cookieHeader?.split(';').map((cookie) => {
      const [name, ...valueParts] = cookie.trim().split('=');
      return [name, valueParts.join('=')];
    }),
  );

  const sessionToken = cookies.get('session');

  if (!sessionToken) {
    return NextResponse.json(
      { errors: [{ message: 'No session token found' }] },
      { status: 400 },
    );
  }

  const session = await getSessionByToken(sessionToken);

  if (!session) {
    return NextResponse.json(
      { errors: [{ message: 'Invalid session token' }] },
      { status: 401 },
    );
  }

  const user = await getUserById(session.userId);

  if (!user) {
    return NextResponse.json(
      { errors: [{ message: 'User not found' }] },
      { status: 404 },
    );
  }

  await deleteUserById(user.id);
  await deleteSessionByToken(sessionToken);

  const response = NextResponse.json({ message: 'User deleted successfully' });
  response.headers.set('Set-Cookie', 'session=; Max-Age=0; Path=/');

  return response;
}

----------------------------------------

// src/app/(auth)/api/logout/route.ts:

// src/app/(auth)/api/logout/route.ts
import { deleteSessionByToken } from '../../../../../database/sessions';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest): Promise<NextResponse> {
  const sessionToken = request.cookies.get('session')?.value;

  if (!sessionToken) {
    return NextResponse.json(
      { errors: [{ message: 'No session token found' }] },
      { status: 400 },
    );
  }

  await deleteSessionByToken(sessionToken);

  const response = NextResponse.json({ message: 'Logged out successfully' });
  response.cookies.set('session', '', { maxAge: -1 });

  return response;
}

----------------------------------------

// src/app/(auth)/api/register/route.ts:

// src/app/(auth)/api/register/route.ts

import { NextResponse } from 'next/server';
import { createUser, getUserByUsername } from '../../../../../database/users';
import { createSession } from '../../../../../database/sessions';
import { z } from 'zod';
import type { User } from '../../../../../database/users';

type RegisterResponseBodyPost =
  | { user: User }
  | { errors: { message: string }[] };

const userSchema = z.object({
  username: z.string().min(3),
  password: z.string().min(3),
});

export async function POST(
  request: Request,
): Promise<NextResponse<RegisterResponseBodyPost>> {
  try {
    const body = await request.json();
    const result = userSchema.safeParse(body);

    if (!result.success) {
      return NextResponse.json(
        { errors: result.error.issues },
        { status: 400 },
      );
    }

    const existingUser = await getUserByUsername(result.data.username);

    if (existingUser) {
      return NextResponse.json(
        { errors: [{ message: 'Username already taken' }] },
        { status: 409 },
      );
    }

    const user = await createUser(result.data.username, result.data.password);

    // Create a session for the new user
    const session = await createSession(user.id);

    const response = NextResponse.json({ user }, { status: 201 });
    response.cookies.set('session', session.token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 12, // 12 hours
    });

    return response;
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { errors: [{ message: 'Internal server error' }] },
      { status: 500 },
    );
  }
}

----------------------------------------

// src/app/(auth)/api/login/route.ts:

import { NextResponse } from 'next/server';
import { getUserByUsername } from '../../../../../database/users';
import { createSession } from '../../../../../database/sessions';
import bcrypt from 'bcrypt';
import { z } from 'zod';
import type { User } from '../../../../../database/users';

type LoginResponseBodyPost = { user: User } | { errors: { message: string }[] };

const loginSchema = z.object({
  username: z.string().min(3),
  password: z.string().min(3),
});

export async function POST(
  request: Request,
): Promise<NextResponse<LoginResponseBodyPost>> {
  try {
    const body = await request.json();
    console.log('Received login request:', body);

    const result = loginSchema.safeParse(body);

    if (!result.success) {
      console.log('Validation failed:', result.error.issues);
      return NextResponse.json(
        { errors: result.error.issues },
        { status: 400 },
      );
    }

    const user = await getUserByUsername(result.data.username);

    if (!user) {
      console.log('User not found:', result.data.username);
      return NextResponse.json(
        { errors: [{ message: 'Invalid username or password' }] },
        { status: 401 },
      );
    }

    // Add a log to verify the result of bcrypt.compare
    const passwordMatch = await bcrypt.compare(
      result.data.password,
      user.passwordHash,
    );
    console.log('Password match result:', passwordMatch);

    if (!passwordMatch) {
      console.log('Password mismatch for user:', result.data.username);
      return NextResponse.json(
        { errors: [{ message: 'Invalid username or password' }] },
        { status: 401 },
      );
    }

    const session = await createSession(user.id);

    console.log('Session created:', session);

    const response = NextResponse.json({ user }, { status: 200 });
    response.cookies.set('session', session.token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 12, // 12 hours
    });

    return response;
  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { errors: [{ message: 'Internal server error' }] },
      { status: 500 },
    );
  }
}

----------------------------------------

// src/app/(auth)/login/LoginForm.tsx:

'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  async function handleLogin(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();

    console.log('Attempting login with:', { username, password });

    const response = await fetch('/api/login', {
      method: 'POST',
      body: JSON.stringify({ username, password }),
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const data = response.ok ? await response.json() : null;

    if (response.ok) {
      console.log('Login successful:', data);
      router.push(`/profile/${username}`); // Redirect to profile page
    } else {
      console.log('Login failed:', data);
      setError(
        data && data.errors
          ? data.errors[0].message
          : 'Invalid username or password',
      );
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Sign In
        </h1>
        <form onSubmit={handleLogin} className="space-y-6">
          {!!error && <p className="text-red-500">{error}</p>}
          <div>
            <label
              htmlFor="username"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Username
            </label>
            <input
              id="username"
              name="username"
              placeholder="Username"
              value={username}
              onChange={(event) => setUsername(event.currentTarget.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              placeholder="Password"
              value={password}
              onChange={(event) => setPassword(event.currentTarget.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <button className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Sign in
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/(auth)/login/page.tsx:

// src/app/(auth)/login/page.tsx

'use client';

import LoginForm from './LoginForm';

export default function LoginPage() {
  return (
    <div className="main-content form-container bg-white dark:bg-gray-900">
      <LoginForm />
    </div>
  );
}

----------------------------------------

// src/app/globals.css:

/* src/app/globals.css */

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-color: #000000;
  --background-color: #ffffff;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-color: #ffffff;
    --background-color: #000000;
  }
}

body {
  color: var(--foreground-color);
  background-color: var(--background-color);
  margin: 0; /* Ensure no default margin/padding */
  padding: 0; /* Ensure no default margin/padding */
  box-sizing: border-box; /* Ensure box sizing is consistent */
}

----------------------------------------

// src/app/layout.tsx:

// src/app/layout.tsx

import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import Header from '../components/Header';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Townwall',
  description: 'Connect with people locally',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Header />
        <main className="main-content">{children}</main>
      </body>
    </html>
  );
}

----------------------------------------

// src/app/middleware.ts:

// src/middleware.ts

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getSessionByToken } from '../../database/sessions';

export async function middleware(request: NextRequest) {
  const sessionToken = request.cookies.get('session')?.value;

  if (!sessionToken) {
    return NextResponse.redirect('/login');
  }

  const session = await getSessionByToken(sessionToken);

  if (!session) {
    return NextResponse.redirect('/login');
  }

  return NextResponse.next();
}

export const config = {
  matcher: ['/profile/:path*'], // Protected routes
};

----------------------------------------

// src/app/page.tsx:

import React from 'react';

export default function Home() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <p className="text-gray-600 mb-8">
        Get started by registering an account or signing in.
      </p>
      <div className="space-x-4">
        <a
          href="/register"
          className="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
        >
          Sign Up
        </a>
        <a
          href="/login"
          className="px-4 py-2 bg-gray-200 text-gray-900 text-sm font-medium rounded-md hover:bg-gray-300"
        >
          Sign In
        </a>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/ProfilePageClient.tsx:

'use client';

import React, { useState } from 'react';

export default function ProfilePageClient({
  user,
}: {
  user: { username: string };
}) {
  const [error, setError] = useState<string | null>(null);

  async function handleLogout() {
    const response = await fetch('/api/logout', {
      method: 'POST',
    });

    if (response.ok) {
      window.location.href = '/login'; // Redirect to login page after logout
    } else {
      setError('Failed to log out');
    }
  }

  async function handleDeleteAccount() {
    const confirmed = window.confirm(
      'Are you sure you want to delete your account? This action is irreversible.',
    );
    if (!confirmed) {
      return;
    }

    const response = await fetch('/api/delete', {
      method: 'POST',
    });

    if (response.ok) {
      window.location.href = '/'; // Redirect to home page after account deletion
    } else {
      const data = await response.json();
      setError(
        data.errors ? data.errors[0].message : 'Failed to delete account',
      );
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Welcome, {user.username}
        </h1>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <button
          onClick={handleLogout}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Sign Out
        </button>
        <button
          onClick={handleDeleteAccount}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Delete Account
        </button>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/page.tsx:

// src/app/profile/[username]/page.tsx

import React from 'react';
import { cookies } from 'next/headers';
import { getUserByUsername } from '../../../../database/users';
import { getSessionByToken } from '../../../../database/sessions';
import ProfilePageClient from '../../profile/ProfilePageClient';

export default async function ProfilePage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const user = await getUserByUsername(username);

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">User not found</p>
      </div>
    );
  }

  return <ProfilePageClient user={user} />;
}

----------------------------------------

// migrations/00000-createUsersTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE users (
      id serial PRIMARY KEY,
      username varchar(255) NOT NULL,
      email varchar(255),
      password_hash varchar(255) NOT NULL,
      full_name text,
      description text,
      profile_id bigint,
      user_image varchar(255),
      location POINT,
      birthdate date,
      profession text,
      links text,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;
  // make email not null!

  await sql`
    CREATE
    OR REPLACE function update_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_users_updated_at before
    UPDATE ON users FOR each ROW
    EXECUTE procedure update_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_users_updated_at ON users`;
  await sql`DROP FUNCTION if EXISTS update_updated_at_column`;
  await sql`DROP TABLE IF EXISTS users`;
}

----------------------------------------

// migrations/00001-createSessionsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE sessions (
      id serial PRIMARY KEY,
      user_id int NOT NULL,
      token varchar(255) NOT NULL,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      expires_at timestamp
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE sessions`;
}

----------------------------------------

// migrations/00002-createFollowsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE follows (
      id serial PRIMARY KEY,
      follower_id int NOT NULL,
      followed_id int NOT NULL,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE follows`;
}

----------------------------------------

// migrations/00003-createCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE comments (
      id serial PRIMARY KEY,
      content text NOT NULL,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;

  await sql`
    CREATE
    OR REPLACE function update_comments_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_comments_updated_at before
    UPDATE ON comments FOR each ROW
    EXECUTE procedure update_comments_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_comments_updated_at ON comments`;
  await sql`DROP FUNCTION if EXISTS update_comments_updated_at_column`;
  await sql`DROP TABLE comments`;
}

----------------------------------------

// migrations/00004-createPostsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts (
      id serial PRIMARY KEY,
      user_id int NOT NULL,
      icon varchar(1),
      title varchar(255) NOT NULL,
      content text NOT NULL,
      category_id bigint,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP,
      slug varchar(255) NOT NULL
    )
  `;

  await sql`
    CREATE
    OR REPLACE function update_posts_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_posts_updated_at before
    UPDATE ON posts FOR each ROW
    EXECUTE procedure update_posts_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_posts_updated_at ON posts`;
  await sql`DROP FUNCTION if EXISTS update_posts_updated_at_column`;
  await sql`DROP TABLE posts`;
}

----------------------------------------

// migrations/00005-createcategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE categories (
      id serial PRIMARY KEY,
      category_name varchar(255) NOT NULL,
      description text
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE categories`;
}

----------------------------------------

// migrations/00006-createPostsCategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts_categories (
      id serial PRIMARY KEY,
      post_id int NOT NULL,
      category_id int NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE posts_categories`;
}

----------------------------------------

// migrations/00007-createUsersCategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE users_categories (
      id serial PRIMARY KEY,
      user_id int NOT NULL,
      category_id int NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE users_categories`;
}

----------------------------------------

// migrations/00008-createProfilesCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE profiles_comments (
      id serial PRIMARY KEY,
      profile_id int NOT NULL,
      comment_id int NOT NULL,
      commenter_id int NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE profiles_comments`;
}

----------------------------------------

// migrations/00009-createPostsCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts_comments (
      id serial PRIMARY KEY,
      profile_id bigint NOT NULL,
      comment_id bigint NOT NULL,
      commenter_id bigint NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE posts_comments`;
}

----------------------------------------

// database/connect.ts:

import postgres from 'postgres';
import { config } from 'dotenv-safe';

config();

export const sql = postgres({
  transform: {
    ...postgres.camel,
    undefined: null,
  },
});

----------------------------------------

// database/sessions.ts:

import { sql } from './connect';
import crypto from 'node:crypto';

export type Session = {
  id: number;
  userId: number;
  token: string;
  createdAt: Date | null;
  expiresAt: Date | null;
};

// Function to create a session
export async function createSession(userId: number): Promise<Session> {
  const token = crypto.randomBytes(32).toString('hex');

  const [session] = await sql<
    {
      id: number | null;
      userId: number | null;
      token: string | null;
      createdAt: Date | null;
      expiresAt: Date | null;
    }[]
  >`
    INSERT INTO
      sessions (user_id, token)
    VALUES
      (
        ${userId},
        ${token}
      )
    RETURNING
      id,
      user_id AS "userId",
      token,
      created_at AS "createdAt",
      expires_at AS "expiresAt"
  `;

  if (!session) {
    throw new Error('Session creation failed');
  }

  return {
    id: session.id!,
    userId: session.userId!,
    token: session.token!,
    createdAt: session.createdAt,
    expiresAt: session.expiresAt,
  };
}

// Function to get a session by token
export async function getSessionByToken(
  token: string,
): Promise<Session | null> {
  const [session] = await sql<Session[]>`
    SELECT
      id,
      user_id AS "userId",
      token,
      created_at AS "createdAt",
      expires_at AS "expiresAt"
    FROM
      sessions
    WHERE
      token = ${token}
  `;

  return session || null;
}

// Function to delete a session by token
export async function deleteSessionByToken(token: string): Promise<void> {
  await sql`
    DELETE FROM sessions
    WHERE
      token = ${token}
  `;
}

----------------------------------------

// database/users.ts:

import { sql } from './connect';
import bcrypt from 'bcrypt';

export type User = {
  id: number;
  username: string;
  passwordHash: string;
};

// Function to create a user
export async function createUser(
  username: string,
  password: string,
): Promise<User> {
  const passwordHash = await bcrypt.hash(password, 10); // Hash password
  const [user] = await sql<
    {
      id: number | null;
      username: string | null;
      passwordHash: string | null;
    }[]
  >`
    INSERT INTO
      users (username, password_hash)
    VALUES
      (
        ${username},
        ${passwordHash}
      )
    RETURNING
      id,
      username,
      password_hash AS "passwordHash"
  `;

  if (!user) {
    throw new Error('User creation failed');
  }

  return {
    id: user.id!,
    username: user.username!,
    passwordHash: user.passwordHash!,
  };
}

// Function to get a user by their username
export async function getUserByUsername(
  username: string,
): Promise<User | undefined> {
  const [user] = await sql<User[]>`
    SELECT
      id,
      username,
      password_hash AS "passwordHash"
    FROM
      users
    WHERE
      username = ${username}
  `;

  return user || undefined;
}

// Function to get a user by their ID
export async function getUserById(id: number): Promise<User | undefined> {
  const [user] = await sql<User[]>`
    SELECT
      id,
      username,
      password_hash AS "passwordHash"
    FROM
      users
    WHERE
      id = ${id}
  `;

  return user || undefined;
}

export async function deleteUserById(id: number): Promise<void> {
  await sql`
    DELETE FROM users
    WHERE
      id = ${id}
  `;
}

----------------------------------------

