// database/posts.ts:

import { sql } from './connect';
import { getCategoryIdsByNames } from './categories';

export type Post = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  createdAt: Date;
  updatedAt: Date | null;
  slug: string;
  author?: string;
  categories?: { id: number; categoryName: string }[];
};

export async function getPostById(postId: number) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      id = ${postId}
  `;
  return posts[0];
}

export async function getPostsByUserId(userId: number) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      user_id = ${userId}
  `;
  return posts;
}

export async function getPostByUserAndSlug(username: string, slug: string) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      p.id,
      p.user_id AS "userId",
      p.icon,
      p.title,
      p.content,
      p.created_at AS "createdAt",
      p.updated_at AS "updatedAt",
      p.slug
    FROM
      posts p
      JOIN users u ON p.user_id = u.id
    WHERE
      u.username = ${username}
      AND p.slug = ${slug}
  `;
  const post = posts[0];
  if (!post) {
    return undefined;
  }

  return {
    ...post,
    author: username,
    categories: await getPostCategories(post.id),
  };
}

export async function createPost(
  userId: number,
  title: string,
  content: string,
  slug: string,
  icon: string = '',
): Promise<Post> {
  const [post] = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    INSERT INTO
      posts (
        user_id,
        icon,
        title,
        content,
        slug
      )
    VALUES
      (
        ${userId},
        ${icon || null},
        ${title},
        ${content},
        ${slug}
      )
    RETURNING
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
  `;

  if (!post) {
    throw new Error('Failed to create post');
  }

  const createdAt = new Date(post.createdAt);
  const updatedAt = post.updatedAt ? new Date(post.updatedAt) : new Date();

  return { ...post, createdAt, updatedAt };
}

export async function addPostCategories(
  postId: number,
  categoryNames: string[],
): Promise<void> {
  const categoryIds = await getCategoryIdsByNames(categoryNames);
  if (categoryIds.length === 0) {
    throw new Error('No valid categories found');
  }

  // Insert categories to post
  await sql`
    INSERT INTO
      posts_categories (post_id, category_id)
    SELECT
      ${postId},
      unnest(
        ${categoryIds}::INT[]
      )
  `;
}

export async function getPostCategories(postId: number) {
  const categories = await sql<{ id: number; categoryName: string }[]>`
    SELECT
      c.id,
      c.category_name AS "categoryName"
    FROM
      categories c
      JOIN posts_categories pc ON c.id = pc.category_id
    WHERE
      pc.post_id = ${postId}
  `;
  return categories;
}

----------------------------------------

// database/categories.ts:

import { sql } from './connect';

export type Category = {
  id: number;
  categoryName: string;
  description?: string;
};

function toTitleCase(str: string): string {
  return str.replace(/\w\S*/g, (txt) => {
    return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase();
  });
}

export function getCategories(): Promise<Category[]> {
  return sql<Category[]>`
    SELECT
      id,
      category_name AS "categoryName",
      description
    FROM
      categories
  `;
}

export async function getCategoryByName(
  categoryName: string,
): Promise<Category | undefined> {
  const categories = await sql<Category[]>`
    SELECT
      id,
      category_name AS "categoryName",
      description
    FROM
      categories
    WHERE
      lower(category_name) = lower(
        ${categoryName}
      )
  `;
  return categories[0] || undefined;
}

export async function createCategory(
  categoryName: string,
  description?: string,
): Promise<Category> {
  const titleCaseCategoryName = toTitleCase(categoryName);

  const categories = await sql<Category[]>`
    INSERT INTO
      categories (category_name, description)
    VALUES
      (
        ${titleCaseCategoryName},
        ${description ?? null}
      )
    RETURNING
      id,
      category_name AS "categoryName",
      description
  `;
  return categories[0]!;
}

export async function addUserCategory(
  userId: number,
  categoryId: number,
): Promise<void> {
  await sql`
    INSERT INTO
      users_categories (user_id, category_id)
    VALUES
      (
        ${userId},
        ${categoryId}
      )
  `;
}

export function getUserCategories(userId: number): Promise<Category[]> {
  return sql<Category[]>`
    SELECT
      c.id,
      c.category_name AS "categoryName",
      c.description
    FROM
      categories c
      INNER JOIN users_categories uc ON c.id = uc.category_id
    WHERE
      uc.user_id = ${userId}
  `;
}

export async function removeUserCategory(
  userId: number,
  categoryName: string,
): Promise<void> {
  const category = await getCategoryByName(categoryName);

  if (!category) {
    throw new Error('Category not found');
  }

  await sql`
    DELETE FROM users_categories
    WHERE
      user_id = ${userId}
      AND category_id = ${category.id}
  `;
}

export async function removePostCategory(
  postId: number,
  categoryName: string,
): Promise<void> {
  const category = await getCategoryByName(categoryName);

  if (!category) {
    throw new Error('Category not found');
  }

  await sql`
    DELETE FROM posts_categories
    WHERE
      post_id = ${postId}
      AND category_id = ${category.id}
  `;
}

export async function getCategoryIdsByNames(
  categoryNames: string[],
): Promise<number[]> {
  const categories = await sql<Category[]>`
    SELECT
      id,
      category_name
    FROM
      categories
    WHERE
      category_name = ANY (
        ${categoryNames}
      )
  `;

  return categories.map((category) => category.id);
}

----------------------------------------

// src/app/(auth)/api/posts/route.ts:

import { NextRequest, NextResponse } from 'next/server';
import { getSessionByToken } from '../../../../../database/sessions';
import {
  createPost,
  addPostCategories,
  getPostsByUserId,
} from '../../../../../database/posts';

// Create Post
export async function POST(request: NextRequest): Promise<NextResponse> {
  try {
    const sessionToken = request.cookies.get('session')?.value;
    if (!sessionToken) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 },
      );
    }

    const session = await getSessionByToken(sessionToken);
    if (!session) {
      return NextResponse.json({ error: 'Session not valid' }, { status: 401 });
    }

    const { title, content, slug, icon, categoryNames } = await request.json();

    if (!title || !content || !slug) {
      return NextResponse.json(
        { error: 'Title, content, and slug are required' },
        { status: 400 },
      );
    }

    const post = await createPost(session.userId, title, content, slug, icon);

    if (categoryNames && categoryNames.length > 0) {
      await addPostCategories(post.id, categoryNames);
    }

    return NextResponse.json(
      { ...post, userId: session.userId },
      { status: 201 },
    );
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

// Obtain Posts by User
export async function GET(request: NextRequest): Promise<NextResponse> {
  const url = new URL(request.url);
  const userId = url.searchParams.get('userId');

  if (!userId) {
    return NextResponse.json({ error: 'User ID is required' }, { status: 400 });
  }

  try {
    const posts = await getPostsByUserId(parseInt(userId, 10));
    return NextResponse.json(posts);
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

----------------------------------------

// src/app/posts/[username]/[slug]/page.tsx:

import { cookies } from 'next/headers';
import {
  getPostByUserAndSlug,
  getPostCategories,
} from '../../../../../database/posts';
import { getSessionByToken } from '../../../../../database/sessions';
import PostClient from './PostClient';
import React from 'react';

export default async function PostPage({
  params,
}: {
  params: { username: string; slug: string };
}) {
  const { username, slug } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const post = await getPostByUserAndSlug(username, slug);

  if (!post) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">Post not found</p>
      </div>
    );
  }

  // Get posts categories
  const categories = await getPostCategories(post.id);

  // Include the author's username and categories in the post data
  post.author = username;
  post.categories = categories;

  return <PostClient post={post} />;
}

----------------------------------------

// src/app/posts/[username]/new/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getUserByUsername } from '../../../../../database/users';
import { getSessionByToken } from '../../../../../database/sessions';
import NewPostForm from './NewPostForm';

export default async function NewPostPage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const user = await getUserByUsername(username);

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">User not found</p>
      </div>
    );
  }

  return (
    <div className="main-content form-container bg-white dark:bg-gray-900">
      <NewPostForm user={user} />
    </div>
  );
}

----------------------------------------

// src/app/posts/[username]/new/NewPostForm.tsx:

// src/app/posts/[username]/new/NewPostForm.tsx

'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

type UserType = {
  id: number;
  username: string;
};

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

function generateSlug(title: string): string {
  return title.toLowerCase().replace(/\s+/g, '-') + '-' + Date.now();
}

export default function NewPostForm({ user }: { user: UserType }) {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [categories, setCategories] = useState<string[]>([]);
  const [newCategory, setNewCategory] = useState('');
  const router = useRouter();

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();

    const slug = generateSlug(title);

    try {
      const response = await fetch('/api/posts', {
        method: 'POST',
        body: JSON.stringify({
          userId: user.id,
          title,
          content,
          slug,
          categoryIds: categories,
        }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const post: PostType = await response.json();
        router.push(`/posts/${user.username}/${post.slug}`);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create post');
      }
    } catch (catchError: any) {
      setError(catchError.message);
    }
  }

  function handleAddCategory() {
    const titleCaseCategory = toTitleCase(newCategory);

    if (
      newCategory &&
      categories.length < 7 &&
      !categories.includes(titleCaseCategory)
    ) {
      setCategories([...categories, titleCaseCategory]);
      setNewCategory('');
    } else if (categories.includes(titleCaseCategory)) {
      setError('Category already added');
    }
  }

  function handleRemoveCategory(categoryToRemove: string) {
    setCategories(
      categories.filter((category) => category !== categoryToRemove),
    );
  }

  function toTitleCase(str: string): string {
    return str.replace(/\w\S*/g, (txt) => {
      return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase();
    });
  }

  return (
    <div className="flex items-center justify-center mt-20 bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-lg p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-xl font-bold text-center text-gray-900 dark:text-white">
          Create a New Post
        </h1>
        <form onSubmit={handleSubmit} className="space-y-6">
          {!!error && <p className="text-red-500 text-center">{error}</p>}
          <div>
            <label
              htmlFor="title"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Title
            </label>
            <input
              id="title"
              name="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Write the title here"
              required
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
            />
          </div>
          <div>
            <label
              htmlFor="content"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Content
            </label>
            <textarea
              id="content"
              name="content"
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="Write your post here"
              required
              className="mt-1 block w-full h-32 px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text
sm"
            />
          </div>
          <div>
            <label
              htmlFor="categories"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Categories
            </label>
            <div className="flex space-x-2">
              <input
                id="newCategory"
                name="newCategory"
                value={newCategory}
                onChange={(e) => setNewCategory(e.target.value)}
                placeholder="Add a new category"
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
              />
              <button
                type="button"
                onClick={handleAddCategory}
                className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
              >
                Add
              </button>
            </div>
            <div className="mt-2 space-y-2">
              {categories.map((category) => (
                <span
                  key={`category-${category}`}
                  className="inline-block bg-amber-300 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2"
                >
                  {category}
                  <button
                    type="button"
                    onClick={() => handleRemoveCategory(category)}
                    className="ml-2 text-gray-500 hover:text-gray-700"
                  >
                    &times;
                  </button>
                </span>
              ))}
            </div>
          </div>
          <div className="flex justify-center">
            <button className="w-1/2 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500">
              Add Post
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/posts/[username]/[slug]/page.tsx:

import { cookies } from 'next/headers';
import {
  getPostByUserAndSlug,
  getPostCategories,
} from '../../../../../database/posts';
import { getSessionByToken } from '../../../../../database/sessions';
import PostClient from './PostClient';
import React from 'react';

export default async function PostPage({
  params,
}: {
  params: { username: string; slug: string };
}) {
  const { username, slug } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const post = await getPostByUserAndSlug(username, slug);

  if (!post) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">Post not found</p>
      </div>
    );
  }

  // Get posts categories
  const categories = await getPostCategories(post.id);

  // Include the author's username and categories in the post data
  post.author = username;
  post.categories = categories;

  return <PostClient post={post} />;
}

----------------------------------------

// src/app/posts/[username]/[slug]/PostClient.tsx:

'use client';

import React, { useState, useEffect } from 'react';

type CommentType = {
  id: number;
  postId: number;
  userId: number;
  content: string;
  createdAt: Date;
  username: string;
};

type CategoryType = {
  id: number;
  categoryName: string;
};

export default function PostClient({ post }: { post: any }) {
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState('');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetch(`/api/comments?postId=${post.id}`)
      .then((response) => response.json())
      .then((data) => setComments(data))
      .catch((err) => setError('Failed to fetch comments'));
  }, [post.id]);

  const handleCommentSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    try {
      const response = await fetch('/api/comments', {
        method: 'POST',
        body: JSON.stringify({ postId: post.id, content: newComment }),
        headers: { 'Content-Type': 'application/json' },
      });

      if (!response.ok) {
        throw new Error('Failed to add comment');
      }

      const comment = await response.json();
      setComments([comment, ...comments]);
      setNewComment('');
    } catch (err) {
      setError('Failed to add comment');
    }
  };

  return (
    <div className="flex items-center justify-center mt-20 mb-20 bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-3xl p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-xl font-bold text-center text-gray-900 dark:text-white">
          {post.title}
        </h1>
        <p className="text-center text-gray-600 dark:text-gray-400">
          By{' '}
          <a
            href={`/profile/${post.author}/public`}
            className="text-blue-700 dark:text-blue-400"
          >
            {post.author}
          </a>{' '}
          on {new Date(post.createdAt).toLocaleDateString()}
          {post.categories && post.categories.length > 0 && (
            <span className="ml-2 inline-block text-sm text-gray-500 dark:text-gray-400">
              {post.categories.map((category: CategoryType) => (
                <span
                  key={category.id}
                  className="ml-1 inline-block bg-amber-300 rounded-full px-2 py-1 text-sm font-semibold text-gray-700"
                >
                  {category.categoryName}
                </span>
              ))}
            </span>
          )}
        </p>
        <p className="text-gray-700 dark:text-gray-300">{post.content}</p>

        <hr className="my-4 border-gray-300 dark:border-gray-600" />

        <h2 className="text-lg font-bold text-center text-gray-900 dark:text-white mt-8">
          Comments
        </h2>

        {!!error && <p className="text-red-500 text-center">{error}</p>}

        <div className="space-y-4">
          {comments.map((comment) => (
            <div
              key={comment.id}
              className="p-4 bg-gray-100 rounded-md dark:bg-gray-700"
            >
              <p className="text-gray-700 dark:text-gray-300">
                {comment.content}
              </p>
              <small className="text-gray-500">
                {new Date(comment.createdAt).toLocaleString()} by{' '}
                <a
                  href={`/profile/${comment.username}/public`}
                  className="text-blue-700 dark:text-blue-400 hover:text-sky-800"
                >
                  {comment.username}
                </a>
              </small>
            </div>
          ))}
        </div>
        <form onSubmit={handleCommentSubmit} className="space-y-4">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment"
            required
            className="w-full p-2 border border-gray-300 rounded-md"
          />
          <div className="flex justify-center">
            <button
              type="submit"
              className="w-1/2 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
            >
              Submit
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/(auth)/api/categories/route.ts:

import { NextRequest, NextResponse } from 'next/server';
import {
  createCategory,
  getCategories,
  removePostCategory,
} from '../../../../../database/categories';

export async function GET(): Promise<NextResponse> {
  try {
    const categories = await getCategories();
    return NextResponse.json(categories);
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

export async function POST(request: NextRequest): Promise<NextResponse> {
  try {
    const { categoryName } = await request.json();
    const category = await createCategory(categoryName);
    const categories = await getCategories();
    return NextResponse.json({ category, categories });
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

export async function DELETE(request: NextRequest): Promise<NextResponse> {
  try {
    const { categoryName, postId } = await request.json();
    await removePostCategory(postId, categoryName);
    const categories = await getCategories();
    return NextResponse.json(categories);
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

----------------------------------------

