// src/app/profile/[username]/[slug]/PrivatePageClient.tsx:

'use client';

import React, { useState, useEffect } from 'react';
import { getCityAndCountry } from '../../../../../util/geocode';
import UserProfile from './UserProfile';
import UserPosts from './UserPosts';
import UserFriends from './UserFriends';

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

type LocationType = {
  city: string;
  country: string;
};

export default function PrivatePageClient({
  user,
  loggedInUserId,
}: {
  user: {
    id: number;
    username: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  loggedInUserId: number | null;
}) {
  const [error, setError] = useState<string | null>(null);
  const [posts, setPosts] = useState<PostType[]>([]);
  const [location, setLocation] = useState<LocationType | null>(null);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch(`/api/posts/user/${user.id}`);
        if (response.ok) {
          const userPosts = await response.json();
          setPosts(userPosts);
        } else {
          setError('Failed to fetch posts');
        }
      } catch (err) {
        setError('Failed to fetch posts');
      }
    };

    fetchPosts();
  }, [user.id]);

  useEffect(() => {
    if (user.location) {
      getCityAndCountry(user.location.y, user.location.x)
        .then((loc) => setLocation(loc))
        .catch((err) => setError('Failed to fetch location data'));
    }
  }, [user.location]);

  async function handleLogout() {
    const response = await fetch('/api/logout', {
      method: 'POST',
    });

    if (response.ok) {
      window.location.href = '/login'; // Redirect to login page after logout
    } else {
      setError('Failed to log out');
    }
  }

  function handleNewPost() {
    window.location.href = `/posts/${user.username}/new`;
  }

  return (
    <div className="w-full min-h-screen p-8 flex flex-col md:flex-row items-center md:items-start bg-gray-100 dark:bg-gray-900 space-y-8 md:space-y-0 md:space-x-8">
      <div className="w-full max-w-4xl bg-white rounded-lg shadow dark:bg-gray-800 p-8 flex justify-center">
        <UserProfile
          user={user}
          location={location}
          error={error}
          handleLogout={handleLogout}
        />
      </div>
      <div className="w-full md:w-2/3 flex flex-col space-y-8">
        <div className="w-full max-w-4xl bg-white rounded-lg shadow dark:bg-gray-800 p-8 flex justify-center">
          <UserPosts user={user} posts={posts} handleNewPost={handleNewPost} />
        </div>
        <div className="w-full max-w-4xl bg-white rounded-lg shadow dark:bg-gray-800 p-8 flex justify-center">
          <UserFriends user={user} />
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/UserFriends.tsx:

'use client';

import React from 'react';
import dynamic from 'next/dynamic';

interface MapProps {
  latitude: number;
  longitude: number;
  height: string;
}

const Map = dynamic(() => import('../../../../components/Map'), { ssr: false });

export default function UserFriends({
  user,
}: {
  user: {
    username: string;
    location?: { x: number; y: number } | null;
  };
}) {
  return (
    <div className="w-full md:w-1/2 p-4 space-y-6">
      <h2 className="text-xl font-bold text-center text-gray-900 dark:text-white">
        Friends
      </h2>
      <div className="flex space-x-4 justify-center">
        <button
          onClick={() =>
            (window.location.href = `/profile/${user.username}/following`)
          }
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Followed Friends
        </button>
        <button
          onClick={() =>
            (window.location.href = `/profile/${user.username}/followers`)
          }
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          My Followers
        </button>
      </div>

      <h3 className="text-lg text-center text-gray-900 dark:text-white">
        Nearby friends:
      </h3>
      {!!user.location && (
        <div className="w-full flex justify-center">
          <Map latitude={user.location.y} longitude={user.location.x} />
        </div>
      )}
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/UserPosts.tsx:

'use client';

import React from 'react';
import Link from 'next/link';

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

export default function UserPosts({
  user,
  posts,
  handleNewPost,
}: {
  user: { username: string };
  posts: PostType[];
  handleNewPost: () => void;
}) {
  return (
    <div className="w-full md:w-1/2 p-4 space-y-6">
      <h2 className="text-xl font-bold text-center text-gray-900 dark:text-white">
        Posts
      </h2>
      <ul>
        {posts.length > 0 ? (
          posts.map((post) => (
            <li key={`post-${post.id}`} className="mb-4">
              <Link
                href={`/posts/${user.username}/${post.slug}`}
                className="text-xl font-semibold text-blue-600 hover:underline"
              >
                {post.title}
              </Link>
              <p className="text-gray-700 dark:text-gray-300">
                {post.content.slice(0, 100)}...
              </p>
            </li>
          ))
        ) : (
          <p className="text-center text-gray-700 dark:text-gray-300">
            No posts yet
          </p>
        )}
      </ul>
      <div className="flex justify-center">
        <button
          onClick={handleNewPost}
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Add New Post
        </button>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/UserProfile.tsx:

'use client';

import React from 'react';

export default function UserProfile({
  user,
  location,
  error,
  handleLogout,
}: {
  user: {
    id: number;
    username: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  location: { city: string; country: string } | null;
  error: string | null;
  handleLogout: () => void;
}) {
  return (
    <div className="w-full md:w-1/2 p-4 space-y-6">
      <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
        My Wall
      </h1>
      <div className="text-center mx-auto">
        <span className="text-9xl">{user.userImage}</span>
      </div>
      <p className="text-center text-gray-700 dark:text-gray-300">
        Username: {user.username}
      </p>
      {!!user.fullName && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          Full Name: {user.fullName}
        </p>
      )}
      {!!user.description && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          Description: {user.description}
        </p>
      )}
      {!!user.interests && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          Interests: {user.interests}
        </p>
      )}
      {!!user.profileLinks && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          Links: {user.profileLinks}
        </p>
      )}
      {!!location && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          Location: {location.city}, {location.country}
        </p>
      )}
      {!!user.birthdate && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          Birthdate: {user.birthdate}
        </p>
      )}
      {!!user.profession && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          Profession: {user.profession}
        </p>
      )}
      {!!error && <p className="text-red-500 text-center">{error}</p>}
      <div className="flex space-x-4 justify-center">
        <button
          onClick={() =>
            (window.location.href = `/profile/${user.username}/edit`)
          }
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Edit Profile
        </button>
        <button
          onClick={handleLogout}
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Sign Out
        </button>
      </div>
      <div className="w-full space-y-4">
        <h2 className="text-xl font-bold text-center text-gray-900 dark:text-white">
          Comments by Friends
        </h2>
        <div className="space-y-2">
          <p className="text-center text-gray-700 dark:text-gray-300">
            No comments yet
          </p>
          {/* Puedes añadir más estructura para los comentarios aquí */}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getUserByUsername } from '../../../../../database/users';
import { getSessionByToken } from '../../../../../database/sessions';
import PrivatePageClient from './PrivatePageClient';
import Link from 'next/link';

export default async function ProfilePage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);
  const loggedInUserId = session ? session.userId : null;

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const user = await getUserByUsername(username);

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">User not found</p>
      </div>
    );
  }

  if (session.userId !== user.id) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">Access denied</p>
      </div>
    );
  }

  const userProfile = {
    id: user.id,
    username: user.username,
    ...(user.fullName && { fullName: user.fullName }),
    ...(user.description && { description: user.description }),
    ...(user.interests && { interests: user.interests }),
    ...(user.profileLinks && { profileLinks: user.profileLinks }),
    ...(user.userImage && { userImage: user.userImage }),
    ...(user.location && { location: user.location }),
    ...(user.birthdate && { birthdate: user.birthdate.toISOString() }),
    ...(user.profession && { profession: user.profession }),
  };

  return (
    <div>
      <PrivatePageClient user={userProfile} loggedInUserId={loggedInUserId} />
    </div>
  );
}

----------------------------------------

