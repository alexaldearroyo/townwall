// src/app/profile/[username]/followers/FollowersList.tsx:

// src/app/profile/[username]/followers/FollowersList.tsx

'use client';

import React from 'react';

type UserType = {
  email: string;
  id: number;
  username: string;
  userImage: string | null;
};

type FollowersListProps = {
  followers: UserType[];
  error: string | null;
};

const FollowersList: React.FC<FollowersListProps> = ({ followers, error }) => {
  return (
    <div className="flex items-center justify-center mt-20 mb-20 bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-xl font-bold text-center text-gray-900 dark:text-white">
          Users Following You
        </h1>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <ul className="flex flex-wrap space-x-2">
          {followers.length > 0 ? (
            followers.map((user) => (
              <li
                key={`user-${user.id}`}
                className="flex items-center space-x-2 mb-2"
              >
                <div className="h-15 w-15 rounded-full">{user.userImage}</div>
                <div>
                  <p className="text-lg font-medium text-gray-900 dark:text-white">
                    <a href={`/profile/${user.username}/public`}>
                      <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold hover:bg-gray-300 text-gray-700 mr-2">
                        {user.username}
                      </span>
                    </a>
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-300">
                    {user.email}
                  </p>
                </div>
              </li>
            ))
          ) : (
            <p className="text-center text-gray-700 dark:text-gray-300">
              No one is following you.
            </p>
          )}
        </ul>
      </div>
    </div>
  );
};

export default FollowersList;

----------------------------------------

// src/app/profile/[username]/followers/page.tsx:

// src/app/profile/[username]/followers/page.tsx

'use client';

import React, { useEffect, useState } from 'react';
import FollowersList from './FollowersList';

type UserType = {
  email: string;
  id: number;
  username: string;
  userImage: string | null;
};

export default function FollowersPage() {
  const [followers, setFollowers] = useState<UserType[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchFollowers = async () => {
      try {
        const response = await fetch('/api/followers');
        if (!response.ok) {
          throw new Error('Failed to fetch followers');
        }
        const data = await response.json();
        setFollowers(data);
      } catch (error: any) {
        setError(error.message);
      }
    };

    fetchFollowers();
  }, []);

  return <FollowersList followers={followers} error={error} />;
}

----------------------------------------

// src/app/profile/[username]/following/FollowingList.tsx:

'use client';

import React, { ReactNode } from 'react';

type UserType = {
  email: ReactNode;
  id: number;
  username: string;
  userImage: string | null;
};

type FollowingListProps = {
  following: UserType[];
  error: string | null;
};

const FollowingList: React.FC<FollowingListProps> = ({ following, error }) => {
  return (
    <div className="flex items-center justify-center mt-20 mb-20 ">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-xl font-bold text-center text-gray-900 dark:text-white">
          Users You Follow
        </h1>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <ul className="flex flex-wrap space-x-2">
          {following.length > 0 ? (
            following.map((user) => (
              <li
                key={`user-${user.id}`}
                className="flex items-center space-x-2 mb-2"
              >
                <div className="flex items-center space-x-2">
                  <div className="text-xl font-bold text-center text-gray-800 dark:text-white">
                    <a href={`/profile/${user.username}/public`}>
                      <span className="inline-block bg-gray-200 hover:bg-gray-300 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2">
                        {user.username}
                      </span>{' '}
                    </a>
                  </div>
                </div>
                {/* <div className="h-15 w-15 rounded-full">{user.userImage}</div> */}
                {/* <div className="text-sm text-gray-500 dark:text-gray-300">
                  {user.location ? user.location : 'Location not available'}
                </div> */}
              </li>
            ))
          ) : (
            <p className="text-center text-gray-700 dark:text-gray-300">
              You are not following anyone.
            </p>
          )}
        </ul>
      </div>
    </div>
  );
};

export default FollowingList;

----------------------------------------

// src/app/profile/[username]/following/page.tsx:

'use client';

import React, { useEffect, useState } from 'react';
import FollowingList from './FollowingList';

type UserType = {
  email: React.ReactNode;
  id: number;
  username: string;
  userImage: string | null;
};

export default function FollowingPage() {
  const [following, setFollowing] = useState<UserType[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchFollowing = async () => {
      try {
        const response = await fetch('/api/following');
        if (!response.ok) {
          throw new Error('Failed to fetch following users');
        }
        const data = await response.json();
        setFollowing(data);
      } catch (error: any) {
        setError(error.message);
      }
    };

    fetchFollowing();
  }, []);

  return <FollowingList following={following} error={error} />;
}

----------------------------------------

