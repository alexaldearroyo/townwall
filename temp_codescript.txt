// src/app/(auth)/register/RegisterForm.tsx:

// src/app/(auth)/register/RegisterForm.tsx

'use client';

import React, { useState } from 'react';

export default function RegisterForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);

  async function handleRegister(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();

    const response = await fetch('/api/register', {
      method: 'POST',
      body: JSON.stringify({ username, password }),
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const data = response.ok ? await response.json() : null;

    if (response.ok) {
      // Handle successful registration
      console.log('User registered:', data);
    } else {
      // Handle errors
      setError(data ? data.errors[0].message : 'An error occurred');
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Register
        </h1>
        <form onSubmit={handleRegister} className="space-y-6">
          {!!error && <p className="text-red-500">{error}</p>}
          <div>
            <label
              htmlFor="username"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Username
            </label>
            <input
              id="username"
              name="username"
              placeholder="Username"
              value={username}
              onChange={(event) => setUsername(event.currentTarget.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              placeholder="Password"
              value={password}
              onChange={(event) => setPassword(event.currentTarget.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Register
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/(auth)/register/page.tsx:

'use client';

import React, { useState } from 'react';

export default function RegisterPage() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    try {
      const response = await fetch('/api/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        setError(data.errors ? data.errors[0].message : 'Unknown error');
        return;
      }

      setSuccess('User registered successfully');
    } catch (error) {
      setError('Failed to register user');
      console.error(error);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 font-sans">
      <h1 className="text-2xl font-bold mb-4 text-gray-700">Register</h1>
      <form
        className="bg-white p-6 rounded-lg shadow-md w-80"
        onSubmit={handleSubmit}
      >
        <div className="mb-4">
          <label htmlFor="username" className="block text-gray-700">
            Username:
          </label>
          <input
            id="username"
            type="text"
            className="w-full px-3 py-2 mt-1 border rounded-md focus:outline-none focus:ring focus:border-blue-300"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
        </div>
        <div className="mb-4">
          <label htmlFor="password" className="block text-gray-700">
            Password:
          </label>
          <input
            id="password"
            type="password"
            className="w-full px-3 py-2 mt-1 border rounded-md focus:outline-none focus:ring focus:border-blue-300"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </div>
        <button
          type="submit"
          className="w-full py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        >
          Register
        </button>
      </form>
      {!!error && <p className="mt-4 text-red-500">{error}</p>}
      {!!success && <p className="mt-4 text-green-500">{success}</p>}
    </div>
  );
}

----------------------------------------

// src/app/(auth)/api/register/route.ts:

import { NextResponse } from 'next/server';
import { createUser, getUserByUsername } from '../../../../../database/users';
import { z } from 'zod';
import type { User } from '../../../../../database/users';

type RegisterResponseBodyPost =
  | { user: User }
  | { errors: { message: string }[] };

const userSchema = z.object({
  username: z.string().min(3),
  password: z.string().min(3),
});

export async function POST(
  request: Request,
): Promise<NextResponse<RegisterResponseBodyPost>> {
  try {
    const body = await request.json();
    const result = userSchema.safeParse(body);

    if (!result.success) {
      return NextResponse.json(
        { errors: result.error.issues },
        { status: 400 },
      );
    }

    const existingUser = await getUserByUsername(result.data.username);

    if (existingUser) {
      return NextResponse.json(
        { errors: [{ message: 'Username already taken' }] },
        { status: 409 },
      );
    }

    const user = await createUser(result.data.username, result.data.password);

    return NextResponse.json({ user }, { status: 201 });
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { errors: [{ message: 'Internal server error' }] },
      { status: 500 },
    );
  }
}

----------------------------------------

// src/app/(auth)/api/login/route.ts:

import { NextResponse } from 'next/server';
import {
  getUserByUsername,
  createSession,
} from '../../../../../database/users';
import bcrypt from 'bcrypt';
import { z } from 'zod';
import type { User } from '../../../../../database/users';

type LoginResponseBodyPost = { user: User } | { errors: { message: string }[] };

const loginSchema = z.object({
  username: z.string().min(3),
  password: z.string().min(3),
});

export async function POST(
  request: Request,
): Promise<NextResponse<LoginResponseBodyPost>> {
  try {
    const body = await request.json();
    console.log('Received login request:', body);

    const result = loginSchema.safeParse(body);

    if (!result.success) {
      console.log('Validation failed:', result.error.issues);
      return NextResponse.json(
        { errors: result.error.issues },
        { status: 400 },
      );
    }

    const user = await getUserByUsername(result.data.username);

    if (!user) {
      console.log('User not found:', result.data.username);
      return NextResponse.json(
        { errors: [{ message: 'Invalid username or password' }] },
        { status: 401 },
      );
    }

    // AÃ±adir log para verificar el resultado de bcrypt.compare
    const passwordMatch = await bcrypt.compare(
      result.data.password,
      user.passwordHash,
    );
    console.log('Password match result:', passwordMatch);

    if (!passwordMatch) {
      console.log('Password mismatch for user:', result.data.username);
      return NextResponse.json(
        { errors: [{ message: 'Invalid username or password' }] },
        { status: 401 },
      );
    }

    const session = await createSession(user.id);

    console.log('Session created:', session);

    const response = NextResponse.json({ user }, { status: 200 });
    response.cookies.set('session', session.token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 12, // 12 hours
    });

    return response;
  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { errors: [{ message: 'Internal server error' }] },
      { status: 500 },
    );
  }
}

----------------------------------------

// src/app/(auth)/login/LoginForm.tsx:

'use client';

import React, { useState } from 'react';

export default function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);

  async function handleLogin(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();

    console.log('Attempting login with:', { username, password });

    const response = await fetch('/api/login', {
      method: 'POST',
      body: JSON.stringify({ username, password }),
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const data = response.ok ? await response.json() : null;

    if (response.ok) {
      console.log('Login successful:', data);
      window.location.href = '/profile'; // Redirect to profile page
    } else {
      console.log('Login failed:', data);
      setError(data ? data.errors[0].message : 'An error occurred');
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Login
        </h1>
        <form onSubmit={handleLogin} className="space-y-6">
          {!!error && <p className="text-red-500">{error}</p>}
          <div>
            <label
              htmlFor="username"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Username
            </label>
            <input
              id="username"
              name="username"
              placeholder="Username"
              value={username}
              onChange={(event) => setUsername(event.currentTarget.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              placeholder="Password"
              value={password}
              onChange={(event) => setPassword(event.currentTarget.value)}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Login
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/(auth)/login/page.tsx:

// src/app/(auth)/login/page.tsx

'use client';

import LoginForm from './LoginForm';

export default function LoginPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <LoginForm />
    </div>
  );
}

----------------------------------------

// src/app/favicon.ico:

         (  F          (  n  00     (-             ¾F  (                                                           $   ]   º   º   ]   $                                           ò   ÿ   ÿ   ÿ   ÿ   ò                               8   à   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   à   8                  â   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   â              ¡   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ¡       #   ô   ÿ   ÿOOOÿ®®®ÿ«««ÿ«««ÿ«««ÿ«««ÿ­­­ÿgggÿ   ÿ   ÿ   ô   #   Y   ÿ   ÿ   ÿÿíííÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿýýýÿ555ÿ   ÿ   ÿ   ÿ   Y   »   ÿ   ÿ   ÿ   ÿkkkÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ   ÿ   ÿ   ÿ   ÿ   »   »   ÿ   ÿ   ÿ   ÿ			ÿÍÍÍÿÿÿÿÿÿÿÿÿäääÿÿ   ÿ   ÿ   ÿ   ÿ   »   Y   ÿ   ÿ   ÿ   ÿ   ÿJJJÿýýýÿÿÿÿÿkkkÿ   ÿ   ÿ   ÿ   ÿ   ÿ   Y   #   ô   ÿ   ÿ   ÿ   ÿÿ¶¶¶ÿÕÕÕÿ			ÿ   ÿ   ÿ   ÿ   ÿ   ô   #       ¡   ÿ   ÿ   ÿ   ÿ   ÿ111ÿDDDÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ¡              â   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   â                  8   à   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   à   8                               ò   ÿ   ÿ   ÿ   ÿ   ò                                           $   ]   º   º   ]   $                                                                                                                                                                                                                                                                                    (       @                                                                               ,   U      è   è      U   ,                                                                                      *      Ò   ù   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ù   Ò      *                                                                         ó   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ó                                                             Q   á   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   á   Q                                               r   û   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   û   r                                       r   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   r                               O   û   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   û   O                          ä   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ã                         ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                  (   õ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ô   '              ÿ   ÿ   ÿ   ÿ   ÿ   ÿ888ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ___ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ             Ô   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿîîîÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿSSSÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   Ô      +   ú   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿhhhÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ®®®ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ú   +   T   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿËËËÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿôôôÿ,,,ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   T      ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿGGGÿýýýÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ      é   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ­­­ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿäääÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   é   é   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ+++ÿóóóÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿjjjÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   é      ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÌÌÌÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ      T   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿãããÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿýýýÿIIIÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   T   +   ú   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿhhhÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ¯¯¯ÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ú   +      Ô   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿËËËÿÿÿÿÿÿÿÿÿôôôÿ,,,ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   Ô             ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿGGGÿýýýÿÿÿÿÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ              '   ô   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ±±±ÿìììÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   õ   (                  ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ333ÿ___ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                         ã   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ä                          O   û   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   û   O                               r   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   r                                       r   û   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   û   r                                               Q   á   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   á   Q                                                             ó   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ó                                                                         *      Ò   ù   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ù   Ò      *                                                                                      ,   U      è   è      U   ,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (   0   `           -                                                                                             	   (   L   j   ³   ø   ÷   ³   j   K   (   	                                                                                                                                          V       Ø   ø   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ø   Ø       U                                                                                                                      %      á   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   á      &                                                                                                         ï   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ï                                                                                             Q   Ü   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   Ü   R                                                                                 þ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   þ                                                                        ­   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ­                                                             ¸   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ¸                                                     ®   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ®                                                 ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                                          P   ý   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ý   O                                  ß   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ß                                 ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                          #   ñ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ñ   #                      ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                     ä   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ$$$ÿhhhÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿeeeÿPPPÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ä              U   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿëëëÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿsssÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   U           ¡   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿeeeÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÌÌÌÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ¡       	   Ú   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿÉÉÉÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿýýýÿHHHÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   Ú   	   (   ù   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿEEEÿüüüÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ®®®ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ø   (   K   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿªªªÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿôôôÿ,,,ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   L   j   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ)))ÿòòòÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   j   ´   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿãããÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ³   ø   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿáááÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿiiiÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ø   ø   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿeeeÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿËËËÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ø   ³   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿÉÉÉÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿýýýÿHHHÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ´   j   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿEEEÿüüüÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ®®®ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   j   L   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿªªªÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿôôôÿ,,,ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   K   (   ø   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ)))ÿòòòÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ù   (   	   Ú   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿãããÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   Ú   	       ¡   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿáááÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿiiiÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ¡           U   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿeeeÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÌÌÌÿÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   U              ä   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿÿÉÉÉÿÿÿÿÿÿÿÿÿýýýÿHHHÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ä                     ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿEEEÿüüüÿÿÿÿÿ®®®ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                      #   ñ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ¬¬¬ÿûûûÿ,,,ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ñ   #                          ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ222ÿ}}}ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                                 ß   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ß                                  O   ý   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ý   P                                          ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ                                                 ®   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ®                                                     ¸   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ¸                                                             ­   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ­                                                                        þ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   þ                                                                                 R   Ü   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   Ü   Q                                                                                             ï   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ï                                                                                                         &      á   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   á      %                                                                                                                      U       Ø   ø   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ÿ   ø   Ø       V                                                                                                                                          	   (   K   j   ³   ÷   ø   ³   j   L   (   	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PNG

   IHDR         \r¨f   sRGB ®Îé   8eXIfMM *    i                                D"8s  IDATxí]	°Õn]<QVAèÄh$	ÊN13*q°ÂdªÄ©I¡DL2ª(Î(Ô2ÖÄÑG	Áq_@å±àxÈï»Ð¾{o÷½½ÓýýUß{}»Oå;çÿûôùÏ9ÝÂd®(Dg Ð8	èôN º]î@ hx¥?v ÀNà3à=`;ð6ð.ð&°àuâà  ±6P©Ð½Á@ÿÃ RÓ PùiZqÊ^DNãàwp¼Ø¼ÐXÐhÐHg@ÀÌ
:Ùâ|ð5` p"@À'¼É²s{ëpü*ð2ÀÞÄ d Ò¯È|(0ø
0 à>Kò
³xX¬6 IJÈ ¤C|?$KENØ}Ï|Âòµáàöh $	2 Ù|/§Â . Nz #¼ÃWeÀ
à5ãÜ¶úà;Ày ¾ ñgàs©h^  IÄÈ DL(¢;¸8 ÒHjgcH|x 1 ËR"aïôÓ GÁÙ@è9`/`%0èHÄ@jð½~,° ÛK
,t).ÎèIDèT¦Oû)~º°Vìu$b èªÐU%¥7¨ù _É$b 8Aç×ÀßøJö3` 510wQñ?¤øvrðÑá:ü2þKÄ@ ¤øv*{%#íAZå^(õÏ=ñ³g \ãÀWÛÉ!:àß,`à6ýÏ643:@c.FÙ¤ðùäu?Ð<'áÝ_Üvp: É8Q¾
IñÅ·p{3ÎóÐkHÈ¢G¡¼®cñÑ¼<62&
×2uCÁÿàÚòæ­ßâ¤Tø3Ú
½ê;î¼ªd/~m½.øXÆ@{äw.°ð«d]GÚ {lKÜàEbÿý(P©RuMüTÛCÒÚÃÀdäï])¿_Lmà=Äû=@bÍ÷KÛGUkÙ^UÓØÆØÖø)1È»gÕT¢Â¯°m`9Ú\Ú®³ÀQþÍ@ØÊÔýâ°6ð:ÚÕ^w¬òï¸ED¤Á ç	ü5°àºëÄFÐ,ßÜ
ðX"Òdmð<nB~òì@´¸÷µt×tx»ü;ÚfÞ>ñªíI8µ»¿8Ó¸C1Ûª$B¸§e©Ý+þjl«ÜEZÃÇ& ©ÊS:â:6°möë´ÿ\G1¥ç`¢¨Å!nl»lÃÆÉ^Q`í·@OcÙSÆÄ@e¸Í·º¹ç¤qbªpÿãSÄ@upº±FÀD@å¿Ð¿º¦Ðæ2@#À¹ÆõL3 £A$H2Ç _h¶FH#rq(íÿOàDò¤¬¨àrunGOWaêb &SgDñ3ÀEDçto§*Ç¤ú¡Ä9kÝ~)¿¡,$Â x¿R1vàK áÀ9DäU(ðw®&LEÒäê©»S)¹é3ÐY8x8 $.i(íÄK¬ÅYìðaÈ]­´À4ôÇ	c®Å@3¸fàó4Æ Æ¢ÿÐ/*bàüþ Çþ$!I~Ø7ÉB*-1`	o  º	$»àÇ¡D¾Lûàòß êJ"äÀOQ¢Ë)ö2@#Ðx4"$e ¨ø·Iö8àOi8ø"Ý ¼GäÞ8[xÄt<ñ.´´7&m&ØR^³tq÷ Øá.¾§ÅYÅ-2È ½d§ ûã*_Üà&d|j\W¼b ãôGùö«â*g¯ £éÄF4ã"IñØ´/ b1qNÈðãÀYDp¼Û9îãpÑ}w\¯ óÔ¤£Ó1 j`èOûî­xK=ÑHñ÷ ÷A1#¾
D:U8jÀõýtù©ë$b bA||ØU¼Q¿ü26%ªÌ)1 è_Àê¢³!~DÙàºæ ¿à+b >A´Ü:]ÑE$£50òGDhRÑtèÐÁéÝ»wRÉ)ðPÇ èn$ 3ÜÖë@bS§Nu,Yâ´jÕÊ²ç:»¡ôÜ;ÀáÀßó@£`Ç|ã-[)'OVýÙÕ©sFxÚ®âÛ¥øn}Í7¯ üü³~ýúÆºº:»ÀQ©J_¤ÎUKj8q0xðàÆ;v4 Ì=[õhW=¾	Ýë	¤&·!e5Ë8hÑ¢EãÝwß]¤üüñá6öïß_õiW}þSZÚ?	¿/`;vlã¾}û2 <±hÑ" »À§ÐAî¹¸ÜÕX,ã mÛ¶+V¬(©ü<¹wïÞÆ#F¨^íª×;ÖþaHðc ûà)SÊ*¿{aùòåpÊØc89(Ñ^þö4&E¦ÛoÃ®Wü/· uÆ=±^þ*?{k^·_EíÇÅúúz¹íªgö UI-è{WU*
:pû9.tÚ·o(/Ýºus>ûì3ç'^RgßäÚGâÌI_D®»åÜ~~½ ¹­{øúÙ?N07½SêØ.Æ×¸ÿ~?}/y]nA;êØ£³ã2 ]ñFOB2C?·_I­÷[Ð:°:Ú=#ÀOzKé-ã ÛÏ£ï%å´®Ý?jÐþIÀ®PÛ¯¤æ{NÊ-hUÝÿt:øõ ,â ·G×KÊ-hUÛç¢chP7 ÿÎ¡ÂÁ@µn?¿\Ó-¸k×.¹ý2ã:õú ð`ÙáFÛ=ý-á V·_ÉG¿ç¤ÜVé Ýõ}¢0 WIù­ªøFºýÊ­öóèsMrZÕ8pJ¸QÜ*@OK8ëöó³
rZ¥ÔÝa, ßûwË ØSéW^y¥¾.· 5íat7ÔØÝ¤üÖTv#Ý~7n­àA"¸üòËÕ+´£WøèpMÂÅ/ªhK8Òíçgä´F/^·«ÅÀM{e ì¨èR|ú)qØë7Ýtæ?8'àµKùíP~ºýî¹ç°ú\õýrÚÑ> Ç·Uk ØeP÷ß|ë^xÇéöó³
/V/Àüvòô¯ôåä¢*×pâvûù ¹­Ð¾Ê]JûË}ók8(ÎÅÇÀÄÑ£GÇOÌmÚ´q,X oúðòe.â^ ¡QxÐÓßptûùõä4^_N{à¾øÅyÄ2 s¤ÛÏÏ Ð-Ø¹sgµsÛÌÐiêvZ8
!~PJ?c«ýîºë®À|Æ] ®Ü½{·³zõê¸Rüµ1pnãÔàzïí¥º¼tlpû9³fÍrºvíjTæ®¿þzß4*OÊLã~øÑçÔ34Ý~~¯r­;ÔmêxY+üÀ¡¤íöó3 r­;Ômêx4à÷Å:7]ÕqL4)U·!rú1êuê6¿ìÕ$ÍÀ7®èÀ8ºwïîÌ3Ç¸|5Ï>?î\zé¥ÍOë·ëÍ× ðø,ïEÅÀ3©2¹¹å[ººº2Wu:E¾´¼^p.H1cJºtû]}õÕBuéÔSOu®º»ÉIcO¥òÄ%  ÆAZ«ýüüü®kµ ºD?Ç5 Þ@Q×À ÿé3Àwê+®¸"ýTÎSÀUÞ¥à13Àî?ûâ5 M'Ýú>pûþZµj~fjÈ××¡Ôn©¦±>× ðÿi5D¤[bf íÕ~a'·`Xc¹ã -¼1ók¢½ÿÄI«ýüÞ÷ý®kµ QºÅ¯|ókßMËé(92È@t°ÉíçÇÝX-èL×aúN4qÜ'$f0@·@VnAÜYá½L9:â|/^sÇ ú	¨Ó)0`êj¿°T\wÝuZ-ÄèîÂ¨\ 	@Ñ:¦±cítûù{È-èÇRb×û1%× ôI,Y%TÛÝ~rú1ØõÂC,¼$´*Ëé«ýÊf<à¹0zþ¥èhÕFüû¦ ·«ý|â¯8Z-èCRü¹Tg× ÐHRfglYíª¹sçÊ-Äp÷Ó'+Ãèî¶mµ_ØgÍÍîçC¿{ ô	òÃÈªÛÏÎ3gÊ-èGR|×¹7`GÞñ¥¡0U·_ÙµZÐ¡Ø¯D )À±ó\>¬»ýÊüÐ¹ýõz N¤Ä@ÖÝ~~´Ê-èÇP¬×{rs¿´@¬<|.]ºÔ¸|Îm|gûõëç¬_¿ÞyåWâKD1bàM½¢%¡s\·¥rú1Ëõnì\Æ"-É Ý`.4æÛ~%3àI}[0A²$µ= -Ò>BH"G®Û^r­<ÂEBGÝi Ú%9Ì@^Ý~~@«ýüú1Üì@ tû-[¶ÌèÏ{%@CÙ$ðmAgüøñÎ5kÊÑÈø/åOÿlßäÓ¿áBÐ@.X°À±uäp¥Oüî6x²9MPn¿`ß·o_§¾¾^nÁ`t
¥§(úª»\rûùsÆAÒyóæéÛþT¡@h
E0lØ0çÎ;ïtÚµÓkÆ¸N ¡¡ÁYµjUà
S#ì|^ã½º- |¢ÝpÃN.­ØÞ¥`×^{­zLñ64 Äbç¨öe]&"ªdsÎ9UÞ¥àU0ð!ÀÁ*nPÐ*`ÿæoÖ¨v¼¹Ái8GåþÔÿhh ØmÍËÀäÉsÏ=×{JÇU0ÀÕóçÏwZ·æþøìö8bEzôèá,Y²Dïþ![C>}7:k×®noÆÀfö >jvR?#bX(¶üFÃAT¾FÕÕióê[Á{ì°zvÄç>º¡CÊía+[0B2Dµ=íG~ë(
øÄºñÆÕõLO×\sÜ>"8|`[)
&Lp8ø'öäÓí4 oGeÎ#£ÛÀlÙ_\DÍÜ2ZØl¢Üi´9täÈ9f Þ¢Ë-¿¼=YÌyn?uQã¯}XÍ¬ÍsAïi >=Ð1æ=RÉí+à +­Ü¡¸.2 Kì«·ßôéÓCÆ¢Û20hÐ Ë«%53À5@MA¹%¦×Ì£ãÈí¼·j[õä9Î;¸û _(¯ú§¿µ0ÀÕ~rûÕÂ\¸{ômÁPüÜÿ®x#TT9¾n?¾ÊíN# á×¥&î}× ¬¯)
ÝTVL¯!¸ßÔjÁªë`ïp ß8@RrûUAVAå¬Ü=¸ã-Þå÷pLHª`@n¿*È1¨ÜUËõ?}w ]ìH2@·ß´iÓV°¸ [Ë¯%àôÿëß5 8±)Ð­
T`|rZbZ-¸.Ö!da+@× ðÎçßóZígf[0p½¼æô ä¤ I´Égr¸$· o%PÇ_rCyÀV|ß½ ÿ¥à"mòYÎÊ-è[ lÚÄk xAã øÛ¯9]¢[pÒ¤IåÈ¨¬pPÇÏk ºFeÙÌÈígHEødnAm"Z$õ5}zå8üéô2røX| ÅàSÜ»w¯³råJsJÖ~Tfþz{ ÌÍ« ÷xÐj?jµàQEÝnò ðjsÀùÁ|GxÐ·ý<dXt(·àQEÝ.¬p¯47 Üð)÷¢þ;Ïysµ_«V­DÈ-XTiÔí¢ý? ~¼èÿÛÏî ·`Qý=Vô?òú^à
¹ºý.]ª|XÞ
ômÁB~¿?ÆøJõ ÞD ·äüÜ~Ùh rêóÿ©ÛERªÀAÝóBæìÝ~wÜqÓ¾}û<Å[Ð¹5ûdóÚ-Õ`5 ?KqÝ~l4ì0@·à)§/I®(¼àØü¥nÎê9¹ý²Y³4è!CÙ2×*w9ÀÀGKÝõsî&rûe³¦súé¶? 6Ù8JÊ |(òuwOä´d°&K)nA¾Ê?RÒn@7,·º8Á=õÿrûe½nÁM69k×òM7óÂéý·J´R]e¥nÊê9¹ý²Z³Ååâ /?áo>Òó¾¤rzrÒÀ óó`åöóV{ö»uëæ4448«V­Êra÷ p³ îõQRZ<{ädK.F9½#~Tâ¾ûîs.¾øâìN%*Ë ÀðáÃuë8G&²¥ì/W:*x%á{Ã}@¦ »lõõõNc#çAIòÀÀ±ÇõiÞ÷£Ë*?ëØ¯À0}gãùC"ÄpÛ¯³ßû¨4èÒ(bÀ8_QùY áîr7'`·ÿî ùj ¸6à *©3ÀWögä"¨àl¢¡Â1:ì±Sg}%È  	¹¥P?÷þ1`£¯ÉYÐ ãâ"Dª0b@¤Æ Ýö9¬¦Àðý¾[táF1Àôp`kÐ\UÓ`ÜRø·A#W81 e`)RÛZMÕö ÷[uæF0ð	rq.ÀÕ¥Ú #^ð=C"Ä9P'«R~f½ ï
pnzdC"Òe ¦§?³\K÷½¨@&$b }jzú3Ûµö x/{èÄ1 Ra#ÿ|÷çÆUK­= &Ä^æTM¹n2À9ÿ5)?s¦Àû{O'óDDàßo [kMÕoK0¿xÿ ÜTd_@]b ræ ÆGÃÄ¶À´; «¯òDDàêÜ1ÀgaRÛ`ÚÜ'`0Â  >\ë/ùñ½fÐùøñ÷Åß!fn÷Z¢|bÜðU .t®åà¤ÑÀÚrª9Å+ý­±î	ýb rnEDk= æé8àÀÙü!b RClãPÞEÙ`¼ÜK'~ß@ Ë}*°!`ø@Á¢6 Lô ;À	$b@DÃÀ?#ÈgÞFý
àµV1výÇ;ÃEsôÝQ¹ÇÌ=É®ö4¿ ßb@TÅÀnþ!¹ò3q¼0^ÊVã c µ1ðÜ¶´¶[ýïëÀM¹=8IÝÕ1@Ú@Cu··`N¸oÀã WJÄÆ WúÑåÇe÷±I¯ n¦¹Nàmà¯¸ÆÜ´ô_d(Ä4`EÜIÂ °¯"ÌµË1 *3ð+\þEå Ñ\MâÀÍ)g	rÁ¦
»è¿8>õ¿pô?vIÒ °0Ç~ü!b ­øÅ$'Ó%"I¿¿RýÀi1 0°? S~&Ô ÓräÆ¤{ nô_ÄÀÈÌLà?ÎTeäÔÆÀ7ùC"rÎÀOQ~"qIË ° O 8?$b §Ürÿ#@×_âv¼JÌ£/¹é3ð'dá/ÈÖ÷W[¤¤ço'Nüðlóú-2Î Ûüå@jÊO~Óî0À2` HÄ@ÆØòÐ+ª¤ÝpOB® ÞuOè¿È(lãSÔü¦9Èô½ò~ðcß:x/èXd.ðù°Æòd ÈÉVày@F $H2Å ïü+M*iÜl8O@F $H2Á å®2­4& r´POÀ´Ö¢üÔÂûä7NùYS ó¶ øÀY1`ðã;ÿJS3n² g['@W@"la`32Ên?'ûHB2p
îhÄmmu ×j@F@ÜV ²­Z!¦¿xIäÉÿH®yÑ±)üù>ÀåZ!6 ºàaÎ`äþ¦ÌdDV$9fëù	pM¿6»I¨!LG:\LdrwPyË~ýPá§%ÔæL3Æá7çTKÑÄAmmo|³6©	3Ðé-Òh J3¿¼?67 á¶yr¶"ûþàgÈÎ4. $±1À÷ý_¼[*¸&¸¤S/õdq´ÎìãäÁCÞâh 3¿¼>6Å¶%±¶Èã\#´RZq¦ð=lK|ÅXÆÀXäWSe j5 /¡ýÐÓ$±:äýv@½ Î8Ð×d1(z2~Fà)´ùö3¢ôÍÁÞÀl®C¿ ëùâè#´í=².\Lt? %Ñ N$9b %Ê:àþ2ùäu	 É1|-	ldòÁ÷t $b À@?ü¥·@ »FàcÔïÏ^Dd[9ýà zÙàÏ:
HÄ@ ¾P2v )~ ¦®@àüïz5°Ç|úÒ¿R«ÖµªàÁ|`# W39Øºá<î"-±0Àï\<ìdÒåuÀoGLz 1Gp°àeå¯d .øjHÄ@jôFÊ3@ c{s<ÿùJ&	É@÷ëöb¸ÙÀw  ²§ ©nÁµàvð²û< ,M;û*p>p!0hHüà{=»ðüxà]IÄÈ DLhèÚâ<'¡h8Ç@V Á#ïãJÿ°àfû IÈ ÄHn¨ûãW}àNÆt[uò$¢°§å þ@ 2 	]&) #3,	=%¯TôÕÀkÀ&à  I÷I¶®Ó³ð Ù[8	è	´L]È]tïTðgõÀ6à-@b2 UOVºã: A?¯} .iî|	àxCÂ÷rvßw; ÎÀ#ê>éi 8_b82 WPìÑõè  {'n¯áÓ8ðz;Æ¤yÝs Ã@¥¦¼P¡·o|ÂSùih $3ðÿ@ß¹jìá    IEND®B`
----------------------------------------

// src/app/globals.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-color: #000000;
  --background-color: #ffffff;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-color: #ffffff;
    --background-color: #000000;
  }
}

body {
  color: var(--foreground-color);
  background-color: var(--background-color);
}

----------------------------------------

// src/app/layout.tsx:

import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Townwall',
  description: 'Connect with people locally',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

----------------------------------------

// src/app/middleware.ts:

// src/middleware.ts

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getSessionByToken } from '../../database/users';

export async function middleware(request: NextRequest) {
  const sessionToken = request.cookies.get('session')?.value;

  if (!sessionToken) {
    return NextResponse.redirect('/login');
  }

  const session = await getSessionByToken(sessionToken);

  if (!session) {
    return NextResponse.redirect('/login');
  }

  return NextResponse.next();
}

export const config = {
  matcher: ['/profile'], // Protected routes
};

----------------------------------------

// src/app/page.tsx:

import React from 'react';

export default function Home() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <h1 className="text-4xl font-bold text-gray-900 mb-6">Townwall</h1>
      <p className="text-gray-600 mb-8">
        Get started by registering an account or signing in.
      </p>
      <div className="space-x-4">
        <a
          href="/register"
          className="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
        >
          Register
        </a>
        <a
          href="/login"
          className="px-4 py-2 bg-gray-200 text-gray-900 text-sm font-medium rounded-md hover:bg-gray-300"
        >
          Sign In
        </a>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getSessionByToken, getUserById } from '../../../database/users';

export default async function ProfilePage() {
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const user = await getUserById(session.userId);

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Welcome, {user.username}
        </h1>
        <p className="text-gray-600 text-center">This is your profile page.</p>
      </div>
    </div>
  );
}

----------------------------------------

// migrations/00000-createUsersTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE users (
      id serial PRIMARY KEY,
      username varchar(255) NOT NULL,
      email varchar(255),
      password_hash varchar(255) NOT NULL,
      full_name text,
      description text,
      profile_id bigint,
      user_image varchar(255),
      location POINT,
      birthdate date,
      profession text,
      links text,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;
  // make email not null!

  await sql`
    CREATE
    OR REPLACE function update_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_users_updated_at before
    UPDATE ON users FOR each ROW
    EXECUTE procedure update_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_users_updated_at ON users`;
  await sql`DROP FUNCTION if EXISTS update_updated_at_column`;
  await sql`DROP TABLE IF EXISTS users`;
}

----------------------------------------

// migrations/00001-createSessionsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE sessions (
      id serial PRIMARY KEY,
      user_id int NOT NULL,
      token varchar(255) NOT NULL,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      expires_at timestamp
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE sessions`;
}

----------------------------------------

// migrations/00002-createFollowsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE follows (
      id serial PRIMARY KEY,
      follower_id int NOT NULL,
      followed_id int NOT NULL,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE follows`;
}

----------------------------------------

// migrations/00003-createCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE comments (
      id serial PRIMARY KEY,
      content text NOT NULL,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;

  await sql`
    CREATE
    OR REPLACE function update_comments_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_comments_updated_at before
    UPDATE ON comments FOR each ROW
    EXECUTE procedure update_comments_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_comments_updated_at ON comments`;
  await sql`DROP FUNCTION if EXISTS update_comments_updated_at_column`;
  await sql`DROP TABLE comments`;
}

----------------------------------------

// migrations/00004-createPostsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts (
      id serial PRIMARY KEY,
      user_id int NOT NULL,
      icon varchar(1),
      title varchar(255) NOT NULL,
      content text NOT NULL,
      category_id bigint,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP,
      slug varchar(255) NOT NULL
    )
  `;

  await sql`
    CREATE
    OR REPLACE function update_posts_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_posts_updated_at before
    UPDATE ON posts FOR each ROW
    EXECUTE procedure update_posts_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_posts_updated_at ON posts`;
  await sql`DROP FUNCTION if EXISTS update_posts_updated_at_column`;
  await sql`DROP TABLE posts`;
}

----------------------------------------

// migrations/00005-createcategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE categories (
      id serial PRIMARY KEY,
      category_name varchar(255) NOT NULL,
      description text
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE categories`;
}

----------------------------------------

// migrations/00006-createPostsCategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts_categories (
      id serial PRIMARY KEY,
      post_id int NOT NULL,
      category_id int NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE posts_categories`;
}

----------------------------------------

// migrations/00007-createUsersCategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE users_categories (
      id serial PRIMARY KEY,
      user_id int NOT NULL,
      category_id int NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE users_categories`;
}

----------------------------------------

// migrations/00008-createProfilesCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE profiles_comments (
      id serial PRIMARY KEY,
      profile_id int NOT NULL,
      comment_id int NOT NULL,
      commenter_id int NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE profiles_comments`;
}

----------------------------------------

// migrations/00009-createPostsCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts_comments (
      id serial PRIMARY KEY,
      profile_id bigint NOT NULL,
      comment_id bigint NOT NULL,
      commenter_id bigint NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE posts_comments`;
}

----------------------------------------

// database/connect.ts:

import postgres from 'postgres';
import { config } from 'dotenv-safe';

config();

export const sql = postgres({
  transform: {
    ...postgres.camel,
    undefined: null,
  },
});

----------------------------------------

// database/users.ts:

import { sql } from './connect';
import bcrypt from 'bcrypt';
import crypto from 'node:crypto';

export type User = {
  id: number;
  username: string;
  passwordHash: string;
};

export type Session = {
  id: number;
  userId: number;
  token: string;
  createdAt: Date;
  expiresAt: Date;
};

// REGISTRATION

// Function to create a user
export async function createUser(
  username: string,
  password: string,
): Promise<User> {
  const passwordHash = await bcrypt.hash(password, 10); // Hash password
  const [user] = await sql<
    {
      id: number | null;
      username: string | null;
      passwordHash: string | null;
    }[]
  >`
    INSERT INTO
      users (username, password_hash)
    VALUES
      (
        ${username},
        ${passwordHash}
      )
    RETURNING
      id,
      username,
      password_hash AS "passwordHash"
  `;

  if (!user) {
    throw new Error('User creation failed');
  }

  return {
    id: user.id!,
    username: user.username!,
    passwordHash: user.passwordHash!,
  };
}

// Function to get a user by their username
export async function getUserByUsername(
  username: string,
): Promise<User | undefined> {
  const [user] = await sql<User[]>`
    SELECT
      id,
      username,
      password_hash AS "passwordHash"
    FROM
      users
    WHERE
      username = ${username}
  `;

  return user || undefined;
}

// Function to get a user by their ID
export async function getUserById(id: number): Promise<User | undefined> {
  const [user] = await sql<User[]>`
    SELECT
      id,
      username,
      password_hash AS "passwordHash"
    FROM
      users
    WHERE
      id = ${id}
  `;

  return user || undefined;
}

// SESSION MANAGEMENT

// Function to create a session
export async function createSession(userId: number): Promise<Session> {
  const token = crypto.randomBytes(32).toString('hex');

  const [session] = await sql<Session[]>`
    INSERT INTO
      sessions (user_id, token)
    VALUES
      (
        ${userId},
        ${token}
      )
    RETURNING
      id,
      user_id,
      token,
      created_at AS "createdAt",
      expires_at AS "expiresAt"
  `;

  if (!session) {
    throw new Error('Failed to create session');
  }

  return session;
}

// Function to get a session by token
export async function getSessionByToken(
  token: string,
): Promise<Session | undefined> {
  const [session] = await sql<Session[]>`
    SELECT
      id,
      user_id,
      token,
      created_at,
      expires_at
    FROM
      sessions
    WHERE
      token = ${token}
  `;
  return session;
}

// Function to delete a session
export async function deleteSession(token: string): Promise<void> {
  await sql`
    DELETE FROM sessions
    WHERE
      token = ${token}
  `;
}

----------------------------------------

