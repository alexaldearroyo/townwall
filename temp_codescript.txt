// database/connect.ts:

import { unstable_noStore as noStore } from 'next/cache';
import postgres, { Sql } from 'postgres';
import postgresConfig from '../ley.config.js';
import { setEnvironmentVariables } from '../util/config.js';

setEnvironmentVariables();

declare module globalThis {
  let postgresSqlClient: Sql;
}

function connectOneTimeToDatabase() {
  if (!('postgresSqlClient' in globalThis)) {
    globalThis.postgresSqlClient = postgres(postgresConfig);
  }

  return ((
    ...sqlParameters: Parameters<typeof globalThis.postgresSqlClient>
  ) => {
    noStore();
    return globalThis.postgresSqlClient(...sqlParameters);
  }) as typeof globalThis.postgresSqlClient;
}

export const sql = connectOneTimeToDatabase();

----------------------------------------

// database/posts.ts:

import { sql } from './connect';

export type Post = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId?: string | number | null;
  createdAt: Date;
  updatedAt: Date | null;
  slug: string;
};

export async function getPostById(postId: number) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      id = ${postId}
  `;
  return posts[0];
}

export async function getPostsByUserId(userId: number) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      user_id = ${userId}
  `;
  return posts;
}

export async function getPostByUserAndId(slug: string) {
  const posts = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
    FROM
      posts
    WHERE
      slug = ${slug}
  `;
  return posts[0];
}

export async function createPost(
  userId: number,
  title: string,
  content: string,
  slug: string,
  icon: string = '',
  categoryId?: number,
): Promise<Post> {
  const [post] = await sql<
    {
      id: number;
      userId: number;
      icon: string | null;
      title: string;
      content: string;
      categoryId: string | null;
      createdAt: Date;
      updatedAt: Date | null;
      slug: string;
    }[]
  >`
    INSERT INTO
      posts (
        user_id,
        icon,
        title,
        content,
        category_id,
        slug
      )
    VALUES
      (
        ${userId},
        ${icon || null},
        ${title},
        ${content},
        ${categoryId ?? null},
        ${slug}
      )
    RETURNING
      id,
      user_id AS "userId",
      icon,
      title,
      content,
      category_id AS "categoryId",
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      slug
  `;

  if (!post) {
    throw new Error('Failed to create post');
  }

  const createdAt = new Date(post.createdAt);
  const updatedAt = post.updatedAt ? new Date(post.updatedAt) : new Date();

  const result: Post = {
    ...post,
    createdAt,
    updatedAt,
  };

  return result;
}

----------------------------------------

// database/sessions.ts:

import { sql } from './connect';
import crypto from 'node:crypto';

export type Session = {
  id: number;
  userId: number;
  token: string;
  createdAt: Date;
  expiresAt: Date;
};

export async function createSession(userId: number): Promise<Session> {
  const token = crypto.randomBytes(32).toString('hex');
  const expiresAt = new Date(Date.now() + 1000 * 60 * 60 * 24);

  const [session] = await sql<
    {
      id: number;
      userId: number;
      token: string;
      createdAt: Date | null;
      expiresAt: Date | null;
    }[]
  >`
    INSERT INTO
      sessions (user_id, token, expires_at)
    VALUES
      (
        ${userId},
        ${token},
        ${expiresAt}
      )
    RETURNING
      id,
      user_id AS "userId",
      token,
      created_at AS "createdAt",
      expires_at AS "expiresAt"
  `;

  if (!session) {
    throw new Error('Session creation failed');
  }

  return {
    id: session.id,
    userId: session.userId,
    token: session.token,
    createdAt: session.createdAt!,
    expiresAt: session.expiresAt || new Date(),
  };
}

export async function getSessionByToken(
  token: string,
): Promise<Session | null> {
  const [session] = await sql<
    {
      id: number;
      userId: number;
      token: string;
      createdAt: Date | null;
      expiresAt: Date | null;
    }[]
  >`
    SELECT
      id,
      user_id AS "userId",
      token,
      created_at AS "createdAt",
      expires_at AS "expiresAt"
    FROM
      sessions
    WHERE
      token = ${token}
  `;

  return session
    ? {
        id: session.id,
        userId: session.userId,
        token: session.token,
        createdAt: session.createdAt || new Date(),
        expiresAt: session.expiresAt || new Date(),
      }
    : null;
}

export async function deleteSessionByToken(token: string): Promise<void> {
  await sql`
    DELETE FROM sessions
    WHERE
      token = ${token}
  `;
}

----------------------------------------

// database/users.ts:

import { sql } from './connect';
import bcrypt from 'bcrypt';

const animalEmojis = [
  'üê∂',
  'üê±',
  'üê≠',
  'üêπ',
  'üê∞',
  'ü¶ä',
  'üêª',
  'üêº',
  'üê®',
  'üêØ',
  'ü¶Å',
  'üêÆ',
  'üê∑',
  'üê∏',
  'üêô',
];

export type User = {
  id: number;
  username: string;
  passwordHash: string;
  userImage: string | null;
  email: string;
  fullName?: string | null;
  description?: string | null;
  interests?: string | null;
  profileLinks?: string | null;
  location?: { x: number; y: number } | null | unknown;
  birthdate?: Date | null;
  profession?: string | null;
  createdAt?: Date | null;
  updatedAt?: Date | null;
  profileId: number;
  slug: string;
};

export type UserProfile = {
  id: number;
  username: string;
  email: string;
  fullName: string | null;
  description: string | null;
  interests: string | null;
  profileLinks: string | null;
  userImage: string | null;
  location: { x: number; y: number } | null;
  birthdate: Date | null;
  profession: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  profileId: number;
  slug: string;
};

// Function to create a user
export async function createUser(
  username: string,
  password: string,
  email: string,
  profileId: number,
  slug: string,
): Promise<User> {
  const passwordHash = await bcrypt.hash(password, 10);
  const randomEmoji =
    animalEmojis[Math.floor(Math.random() * animalEmojis.length)] || '';

  const users = await sql<
    {
      id: number;
      username: string;
      passwordHash: string;
      userImage: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      location: any;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    INSERT INTO
      users (
        username,
        password_hash,
        user_image,
        email,
        profile_id,
        slug
      )
    VALUES
      (
        ${username},
        ${passwordHash},
        ${randomEmoji},
        ${email},
        ${profileId},
        ${slug}
      )
    RETURNING
      id,
      username,
      password_hash AS "passwordHash",
      user_image AS "userImage",
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      location,
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
  `;

  if (users.length === 0) {
    throw new Error('User creation failed');
  }

  const user = users[0] as User;
  return user;
}

// Function to get a user by their username
// Function to get a user by their username
export async function getUserByUsername(
  username: string,
): Promise<User | undefined> {
  const users = await sql<
    {
      id: number;
      username: string;
      passwordHash: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: unknown | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    SELECT
      id,
      username,
      password_hash AS "passwordHash",
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      user_image AS "userImage",
      st_astext (location) AS "location",
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
    FROM
      users
    WHERE
      username = ${username}
  `;

  if (users.length === 0) {
    return undefined;
  }

  const user = users[0];
  if (user) {
    user.location = user.location
      ? parseLocation(user.location as string)
      : null;
  }

  return user;
}

// Function to get a user by their ID
export async function getUserById(id: number): Promise<User> {
  const users = await sql<
    {
      id: number;
      username: string;
      passwordHash: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: unknown | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    SELECT
      id,
      username,
      password_hash AS "passwordHash",
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      user_image AS "userImage",
      st_astext (location) AS "location",
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
    FROM
      users
    WHERE
      id = ${id}
  `;

  if (users.length === 0) {
    throw new Error(`User with username ${id} not found`);
  }

  const user = users[0];
  if (!user) {
    throw new Error(`User with username ${id} not found`);
  }

  user.location = user.location ? parseLocation(user.location as string) : null;

  return user;
}

// Function to delete a user by their ID
export async function deleteUserById(id: number): Promise<void> {
  await sql`
    DELETE FROM users
    WHERE
      id = ${id}
  `;
}

// Function to update user profile
export async function updateUserProfile(
  userId: number,
  profileData: Partial<UserProfile>,
): Promise<UserProfile> {
  const birthdateValue = profileData.birthdate
    ? `to_date('${new Date(profileData.birthdate).toISOString().split('T')[0]}', 'YYYY-MM-DD')`
    : null;
  const locationValue = profileData.location
    ? `ST_SetSRID(ST_Point(${profileData.location.x}, ${profileData.location.y}), 4326)`
    : null;
  const users = await sql<
    {
      id: number;
      username: string;
      email: string;
      fullName: string | null;
      description: string | null;
      interests: string | null;
      profileLinks: string | null;
      userImage: string;
      location: string | null;
      birthdate: Date | null;
      profession: string | null;
      createdAt: Date | null;
      updatedAt: Date | null;
      profileId: number;
      slug: string;
    }[]
  >`
    UPDATE users
    SET
      full_name = coalesce(
        ${profileData.fullName ?? 'null'},
        full_name
      ),
      description = coalesce(
        ${profileData.description ?? 'null'},
        description
      ),
      interests = coalesce(
        ${profileData.interests ?? 'null'},
        interests
      ),
      profile_links = coalesce(
        ${profileData.profileLinks ?? 'null'},
        profile_links
      ),
      user_image = coalesce(
        ${profileData.userImage ?? 'null'},
        user_image
      ),
      location = coalesce(
        ${locationValue}::geometry,
        location
      ),
      birthdate = coalesce(
        ${birthdateValue}::date,
        birthdate
      ),
      profession = coalesce(
        ${profileData.profession ?? 'null'},
        profession
      ),
      updated_at = now()
    WHERE
      id = ${userId}
    RETURNING
      id,
      username,
      email,
      full_name AS "fullName",
      description,
      interests,
      profile_links AS "profileLinks",
      user_image AS "userImage",
      st_astext (location) AS "location",
      birthdate,
      profession,
      created_at AS "createdAt",
      updated_at AS "updatedAt",
      profile_id AS "profileId",
      slug
  `;

  const updatedUser = users[0];

  if (!updatedUser) {
    throw new Error('Profile update failed');
  }

  if (updatedUser.location) {
    const parsedLocation = parseLocation(updatedUser.location);
    updatedUser.location = parsedLocation
      ? JSON.stringify(parsedLocation)
      : null;
  }

  return updatedUser as UserProfile;
}

// Helper function to parse location from string to { x: number; y: number }
function parseLocation(
  locationString: string,
): { x: number; y: number } | null {
  const match = locationString.match(/POINT\(([-\d.]+) ([-\d.]+)\)/);
  if (!match) {
    return null;
  }
  const [, x, y] = match;
  return { x: parseFloat(x || '0'), y: parseFloat(y || '0') };
}

----------------------------------------

// src/app/profile/ProfilePageClient.tsx:

// profilepageclient new

'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { getPostsByUserId } from '../../../database/posts';

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

export default function ProfilePageClient({
  user,
}: {
  user: {
    id: number;
    username: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: string;
    birthdate?: string;
    profession?: string;
  };
}) {
  const [error, setError] = useState<string | null>(null);
  const [posts, setPosts] = useState<PostType[]>([]);

  useEffect(() => {
    const fetchPosts = async () => {
      if (user && user.id) {
        const response = await fetch(`/api/posts/user/${user.id}`);
        const userPosts = await response.json();
        setPosts(userPosts);
      }
    };

    fetchPosts();
  }, [user.id]);

  async function handleLogout() {
    const response = await fetch('/api/logout', {
      method: 'POST',
    });

    if (response.ok) {
      window.location.href = '/login'; // Redirect to login page after logout
    } else {
      setError('Failed to log out');
    }
  }

  async function handleDeleteAccount() {
    const confirmed = window.confirm(
      'Are you sure you want to delete your account? This action is irreversible.',
    );
    if (!confirmed) {
      return;
    }

    const response = await fetch('/api/delete', {
      method: 'POST',
    });

    if (response.ok) {
      window.location.href = '/'; // Redirect to home page after account deletion
    } else {
      const data = await response.json();
      setError(
        data.errors ? data.errors[0].message : 'Failed to delete account',
      );
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Welcome, {user.username}
        </h1>
        <div className="text-center mx-auto">
          <span className="text-9xl">{user.userImage}</span>
        </div>

        {!!user.fullName && user.fullName.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            Full Name: {user.fullName}
          </p>
        )}
        {!!user.description && user.description.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            Description: {user.description}
          </p>
        )}
        {!!user.interests && user.interests.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            Interests: {user.interests}
          </p>
        )}
        {!!user.profileLinks && user.profileLinks.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            Links: {user.profileLinks}
          </p>
        )}
        {!!user.location && user.location.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            Location: {user.location}
          </p>
        )}
        {!!user.birthdate && user.birthdate.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            Birthdate: {user.birthdate}
          </p>
        )}
        {!!user.profession && user.profession.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            Profession: {user.profession}
          </p>
        )}
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <ul>
          {posts.length > 0 ? (
            posts.map((post) => (
              <li key={post.id}>
                <Link ref={`/posts/${post.slug}`} href={'/'}>
                  <a>{post.title}</a>
                </Link>
              </li>
            ))
          ) : (
            <p className="text-center text-gray-700 dark:text-gray-300">
              No Posts Yet
            </p>
          )}
        </ul>

        <Link href={{ pathname: `/posts/${user.username}/new` }}>
          <button className="mt-4 w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
            Add new post
          </button>
        </Link>
        <button
          onClick={() => (window.location.href = `/profile/edit`)}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Edit Profile
        </button>
        <button
          onClick={handleLogout}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Sign Out
        </button>
        <button
          onClick={handleDeleteAccount}
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Delete Account
        </button>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/posts/[username]/new/NewPostForm.tsx:

'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';

type UserType = {
  id: number;
  username: string;
};

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

function generateSlug(title: string): string {
  return title.toLowerCase().replace(/\s+/g, '-') + '-' + Date.now();
}

export default function NewPostForm({ user }: { user: UserType }) {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();

    const slug = generateSlug(title);

    console.log('Form data:', { userId: user.id, title, content, slug });

    try {
      const response = await fetch('/api/posts', {
        method: 'POST',
        body: JSON.stringify({ userId: user.id, title, content, slug }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const post: PostType = await response.json();
        router.push(`/posts/${post.slug}`);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create post');
      }
    } catch (catchError: any) {
      setError(catchError.message);
    }
  }

  return (
    <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg dark:bg-gray-800">
      <form onSubmit={handleSubmit} className="space-y-6">
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <div>
          <label
            htmlFor="title"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Title
          </label>
          <input
            id="title"
            name="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Write the title here"
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="content"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Content
          </label>
          <textarea
            id="content"
            name="content"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Write your post here"
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
        <div>
          <button className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Add Post
          </button>
        </div>
      </form>
    </div>
  );
}

----------------------------------------

// src/app/posts/[username]/page.tsx:

import React from 'react';
import { getPostByUserAndId } from '../../../../database/posts';

export default async function PostPage({
  params,
}: {
  params: { slug: string };
}) {
  const { slug } = params;
  const post = await getPostByUserAndId(slug);

  if (!post) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">Post not found</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-2xl p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          {post.title}
        </h1>
        <div className="text-center">
          <span className="text-lg">{post.content}</span>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/posts/[username]/new/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getUserByUsername } from '../../../../../database/users';
import { getSessionByToken } from '../../../../../database/sessions';
import NewPostForm from './NewPostForm';

export default async function NewPostPage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const user = await getUserByUsername(username);

  if (!user || session.userId !== user.id) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">Access denied</p>
      </div>
    );
  }

  return (
    <div className="main-content form-container bg-white dark:bg-gray-900">
      <NewPostForm user={user} />
    </div>
  );
}

----------------------------------------

// src/app/(auth)/api/posts/route.ts:

// src/app/(auth)/api/posts/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { getSessionByToken } from '../../../../../database/sessions';
import {
  createPost,
  getPostsByUserId,
  getPostByUserAndId,
} from '../../../../../database/posts';

// Crear Post
export async function createNewPost(
  request: NextRequest,
): Promise<NextResponse> {
  try {
    const sessionToken = request.cookies.get('session')?.value;
    if (!sessionToken) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 },
      );
    }

    const session = await getSessionByToken(sessionToken);
    if (!session) {
      return NextResponse.json({ error: 'Session not valid' }, { status: 401 });
    }

    const { title, content, slug, icon, categoryId } = await request.json();

    if (!title || !content || !slug) {
      return NextResponse.json(
        { error: 'Title, content, and slug are required' },
        { status: 400 },
      );
    }

    const post = await createPost(
      session.userId,
      title,
      content,
      slug,
      icon,
      categoryId,
    );

    return NextResponse.json(
      { ...post, userId: session.userId },
      { status: 201 },
    );
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

// Obtener Posts por Usuario
export async function GET(request: NextRequest): Promise<NextResponse> {
  const url = new URL(request.url);
  const userId = url.searchParams.get('userId');

  if (!userId) {
    return NextResponse.json({ error: 'User ID is required' }, { status: 400 });
  }

  try {
    const posts = await getPostsByUserId(parseInt(userId, 10));
    return NextResponse.json(posts);
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

// Obtener Post por Slug
export async function POST(request: NextRequest): Promise<NextResponse> {
  const url = new URL(request.url);
  const slug = url.searchParams.get('slug');

  if (!slug) {
    return NextResponse.json({ error: 'Slug is required' }, { status: 400 });
  }

  try {
    const post = await getPostByUserAndId(slug);
    if (!post) {
      return NextResponse.json({ error: 'Post not found' }, { status: 404 });
    }
    return NextResponse.json(post);
  } catch (error) {
    return NextResponse.json(
      { error: (error as Error).message },
      { status: 500 },
    );
  }
}

----------------------------------------

// src/app/middleware.ts:

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getSessionByToken } from '../../database/sessions';
import { getUserById } from '../../database/users';

export async function middleware(request: NextRequest) {
  const sessionToken = request.cookies.get('session')?.value;

  if (!sessionToken) {
    return NextResponse.redirect('/login');
  }

  const session = await getSessionByToken(sessionToken);

  if (!session) {
    return NextResponse.redirect('/login');
  }

  const user = await getUserById(session.userId);

  if (!user) {
    return NextResponse.redirect('/login');
  }

  const pathname = request.nextUrl.pathname;

  // Check if the user is trying to access the profile of another user
  const profileMatch = pathname.match(/^\/profile\/([^\/]+)$/);
  if (profileMatch) {
    const userId = profileMatch[1];
    if (parseInt(userId ?? '') !== user.id) {
      return NextResponse.redirect(`/profile/${user.id}`);
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ['/profile/:path*'], // Protected routes
};

----------------------------------------

