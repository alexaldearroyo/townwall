// src/app/profile/[username]/followers/FollowersList.tsx:

// src/app/profile/[username]/followers/FollowersList.tsx

'use client';

import React from 'react';

type UserType = {
  email: string;
  id: number;
  username: string;
  userImage: string | null;
};

type FollowersListProps = {
  followers: UserType[];
  error: string | null;
};

const FollowersList: React.FC<FollowersListProps> = ({ followers, error }) => {
  return (
    <div className="flex items-center justify-center mt-20 mb-20 bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-xl font-bold text-center text-gray-900 dark:text-white">
          Users Following You
        </h1>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <ul>
          {followers.length > 0 ? (
            followers.map((user) => (
              <li
                key={`user-${user.id}`}
                className="flex items-center space-x-4 mb-4"
              >
                <div className="h-15 w-15 rounded-full">{user.userImage}</div>
                <div>
                  <p className="text-lg font-medium text-gray-900 dark:text-white">
                    <a href={`/profile/${user.username}/public`}>
                      {user.username}
                    </a>
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-300">
                    {user.email}
                  </p>
                </div>
              </li>
            ))
          ) : (
            <p className="text-center text-gray-700 dark:text-gray-300">
              No one is following you.
            </p>
          )}
        </ul>
      </div>
    </div>
  );
};

export default FollowersList;

----------------------------------------

// src/app/profile/[username]/followers/page.tsx:

// src/app/profile/[username]/followers/page.tsx

'use client';

import React, { useEffect, useState } from 'react';
import FollowersList from './FollowersList';

type UserType = {
  email: string;
  id: number;
  username: string;
  userImage: string | null;
};

export default function FollowersPage() {
  const [followers, setFollowers] = useState<UserType[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchFollowers = async () => {
      try {
        const response = await fetch('/api/followers');
        if (!response.ok) {
          throw new Error('Failed to fetch followers');
        }
        const data = await response.json();
        setFollowers(data);
      } catch (error: any) {
        setError(error.message);
      }
    };

    fetchFollowers();
  }, []);

  return <FollowersList followers={followers} error={error} />;
}

----------------------------------------

// src/app/profile/[username]/edit/EditProfileForm.tsx:

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { CldUploadWidget } from 'next-cloudinary';
import { CldImage } from 'next-cloudinary';

const animalEmojis = [
  '🐶',
  '🐱',
  '🐭',
  '🐹',
  '🐰',
  '🦊',
  '🐻',
  '🐼',
  '🐨',
  '🐯',
  '🦁',
  '🐮',
  '🐷',
  '🐸',
  '🐙',
];

export default function EditProfileForm({ user }: { user: any }) {
  const [formData, setFormData] = useState({
    ...user,
    userImage:
      user.userImage ||
      animalEmojis[Math.floor(Math.random() * animalEmojis.length)],
  });
  const [error, setError] = useState<string | null>(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [interests, setInterests] = useState<string[]>([]);
  const [newInterest, setNewInterest] = useState('');
  const router = useRouter();

  useEffect(() => {
    setFormData(user);
    setInterests(user.interests ? user.interests.split(',') : []);
  }, [user]);

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();

    try {
      const response = await fetch('/api/profile', {
        method: 'POST',
        body: JSON.stringify({
          ...formData,
          interests: JSON.stringify(interests),
        }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const updatedUser = await response.json();
        setFormData(updatedUser.user);
        router.push(
          `/profile/${updatedUser.user.username}/${updatedUser.user.slug}`,
        );
      } else {
        throw new Error('Failed to update profile');
      }
    } catch (catchError: any) {
      setError(catchError.message);
    }
  }

  async function handleDelete() {
    try {
      const response = await fetch('/api/delete', {
        method: 'POST',
      });

      if (response.ok) {
        router.push('/register');
      } else {
        throw new Error('Failed to delete user');
      }
    } catch (catchError: any) {
      setError(catchError.message);
    }
  }

  function handleChange(
    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
  ) {
    const { name, value } = event.target;
    setFormData((prevData: any) => ({
      ...prevData,
      [name]: value,
    }));
  }

  function handleEmojiClick() {
    setShowEmojiPicker(!showEmojiPicker);
  }

  function handleEmojiSelect(emoji: string) {
    setFormData((prevData: any) => ({
      ...prevData,
      userImage: emoji,
    }));
    setShowEmojiPicker(false);
  }

  async function handleAddInterest() {
    const titleCaseInterest = toTitleCase(newInterest);

    if (
      newInterest &&
      interests.length < 7 &&
      !interests.includes(titleCaseInterest)
    ) {
      const response = await fetch('/api/interests', {
        method: 'POST',
        body: JSON.stringify({ categoryName: titleCaseInterest }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setInterests(data.categories.map((cat: any) => cat.categoryName));
        setNewInterest('');
      } else {
        setError('Failed to add interest');
      }
    } else if (interests.includes(titleCaseInterest)) {
      setError('Interest already added');
    }
  }

  async function handleRemoveInterest(interestToRemove: string) {
    try {
      const response = await fetch('/api/interests', {
        method: 'DELETE',
        body: JSON.stringify({
          categoryName: interestToRemove,
          userId: user.id,
        }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to remove interest');
      }

      setInterests(
        interests.filter((interest) => interest !== interestToRemove),
      );
    } catch {
      setError('Failed to remove interest');
    }
  }

  function toTitleCase(str: string): string {
    return str.replace(/\w\S*/g, (txt) => {
      return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase();
    });
  }

  function handleUpload(result: any) {
    if (result.event === 'success') {
      setFormData((prevData: any) => ({
        ...prevData,
        userImage: result.info.secure_url,
      }));
    }
  }

  return (
    <div className="flex items-center justify-center p-8">
      <div className="w-full max-w-2xl p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-xl font-bold text-center text-gray-800 dark:text-white">
          Edit My Profile
        </h1>
        <div className="text-center">
          <button
            className="text-9xl cursor-pointer"
            onClick={handleEmojiClick}
            tabIndex={0}
            style={{
              borderRadius: '50%',
              overflow: 'hidden',
              width: '150px',
              height: '150px',
            }}
          >
            {formData.userImage.startsWith('http') ? (
              <CldImage
                src={formData.userImage}
                width="150"
                height="150"
                crop="fill"
                alt=""
              />
            ) : (
              formData.userImage
            )}
          </button>
          {/* <p className="text-gray-500 text-sm">
            Click on image to change to avatar
          </p> */}
          {showEmojiPicker && (
            <div className="mt-2 flex flex-wrap justify-center space-x-2">
              {animalEmojis.map((emoji) => (
                <button
                  key={`emoji-${emoji}`}
                  className="text-2xl cursor-pointer"
                  onClick={() => handleEmojiSelect(emoji)}
                >
                  {emoji}
                </button>
              ))}
            </div>
          )}
          <div className="mt-4 flex space-x-4 justify-center">
            <button
              onClick={handleEmojiClick}
              className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
            >
              Change Avatar
            </button>
            <CldUploadWidget
              uploadPreset="ml_default"
              onUpload={handleUpload}
              options={{
                styles: {
                  palette: {
                    window: '#FFFFFF',
                    sourceBg: '#F4F4F5',
                    windowBorder: '#90A0B3',
                    tabIcon: '#0369a1',
                    inactiveTabIcon: '#0284c7',
                    menuIcons: '#0284c7',
                    link: '#0284c7',
                    action: '#059669',
                    inProgress: '#047857',
                    complete: '#059669',
                    error: '#E92626',
                    textDark: '#1f2937',
                    textLight: '#FFFFFF',
                  },
                  fonts: {
                    default: null,
                    "'Open Sans', sans-serif": {
                      url: 'https://fonts.googleapis.com/css?family=Open+Sans',
                      active: true,
                    },
                  },
                  frame: {
                    position: 'fixed',
                    top: '50%',
                    left: '50%',
                    width: '400px',
                    height: '400px',
                    transform: 'translate(-50%, -50%)',
                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
                    borderRadius: '8px',
                    zIndex: '1000',
                  },
                },
              }}
            >
              {({ open }) => (
                <button
                  onClick={() => open()}
                  className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
                >
                  Upload Image
                </button>
              )}
            </CldUploadWidget>{' '}
          </div>
        </div>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <form
          onSubmit={handleSubmit}
          className="w-full max-w-xl space-y-6 bg-gray-100 dark:bg-gray-700 p-6 rounded-md mx-auto"
        >
          <div>
            <label
              htmlFor="fullName"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Full Name
            </label>
            <input
              id="fullName"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              placeholder={formData.fullName ? '' : 'Enter your full name'}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
            />
          </div>
          <div>
            <label
              htmlFor="description"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Description
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              placeholder={
                formData.description ? '' : 'Enter a description of yourself'
              }
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
            />
          </div>
          <div>
            <label
              htmlFor="interests"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Interests
            </label>
            <div className="flex space-x-2 items-center">
              <input
                id="newInterest"
                name="newInterest"
                value={newInterest}
                onChange={(e) => setNewInterest(e.target.value)}
                placeholder="Add a new interest"
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
              />
              <button
                type="button"
                onClick={handleAddInterest}
                className="py-2 px-3 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
                style={{ height: 'calc(2rem + 2px)' }}
              >
                Add
              </button>
            </div>
            <div className="mt-2 space-y-2">
              {interests.map((interest) => (
                <span
                  key={`interest-${interest}`}
                  className="inline-block bg-amber-300 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2"
                >
                  {interest}
                  <button
                    type="button"
                    onClick={() => handleRemoveInterest(interest)}
                    className="ml-2 text-gray-500 hover:text-gray-700"
                  >
                    &times;
                  </button>
                </span>
              ))}
            </div>
          </div>
          <div>
            <label
              htmlFor="profileLinks"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Personal Links
            </label>
            <input
              id="profileLinks"
              name="profileLinks"
              value={formData.profileLinks}
              onChange={handleChange}
              placeholder={
                formData.profileLinks ? '' : 'Enter your personal links'
              }
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
            />
          </div>
          <div>
            <label
              htmlFor="birthdate"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Birth Date
            </label>
            <input
              id="birthdate"
              name="birthdate"
              type="date"
              value={formData.birthdate}
              onChange={handleChange}
              placeholder={formData.birthdate ? '' : 'Enter your birth date'}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
            />
          </div>
          <div>
            <label
              htmlFor="profession"
              className="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Profession
            </label>
            <input
              id="profession"
              name="profession"
              value={formData.profession}
              onChange={handleChange}
              placeholder={formData.profession ? '' : 'Enter your profession'}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-sky-500 focus:border-sky-500 sm:text-sm"
            />
          </div>
          <div className="flex justify-center space-x-4">
            <button className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500">
              Save Changes
            </button>
            <button
              type="button"
              onClick={handleDelete}
              className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Delete User
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/edit/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getSessionByToken } from '../../../../../database/sessions';
import { getUserById } from '../../../../../database/users';
import EditProfileForm from './EditProfileForm';

export default async function EditProfilePage() {
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p className="text-xl text-centered text-red-500">
          You are not logged in
        </p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p className="text-xl text-centered text-red-500">
          You are not logged in
        </p>
      </div>
    );
  }

  const user = await getUserById(session.userId);

  const userProfile = {
    username: user.username,
    email: user.email,
    fullName: user.fullName || '',
    description: user.description || '',
    interests: user.interests || '',
    profileLinks: user.profileLinks || '',
    userImage: user.userImage || '',
    location: user.location || '',
    birthdate: user.birthdate ? user.birthdate.toISOString().split('T')[0] : '',
    profession: user.profession || '',
  };

  return (
    <div className="main-content form-container">
      <EditProfileForm user={userProfile} />
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/comments/page.tsx:

'use client';

import React, { useState, useEffect } from 'react';

type CommentType = {
  id: number;
  profileId: number;
  userId: number;
  content: string;
  createdAt: Date;
  username: string;
  userImage: string;
};

export default function CommentsPage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [profileId, setProfileId] = useState<number | null>(null);

  useEffect(() => {
    const fetchUserAndComments = async () => {
      try {
        const userResponse = await fetch(`/api/users/username/${username}`);
        const user = await userResponse.json();
        setProfileId(user.id);

        const commentsResponse = await fetch(
          `/api/profile/comments?profileId=${user.id}`,
        );
        const commentsData = await commentsResponse.json();
        setComments(commentsData);
      } catch (err) {
        setError('Failed to fetch comments or user');
      }
    };

    fetchUserAndComments();
  }, [username]);

  const handleCommentSubmit = async (
    event: React.FormEvent<HTMLFormElement>,
  ) => {
    event.preventDefault();

    if (!profileId) {
      setError('Profile ID is not set');
      return;
    }

    try {
      const response = await fetch('/api/profile/comments', {
        method: 'POST',
        body: JSON.stringify({ profileId, content: newComment }),
        headers: { 'Content-Type': 'application/json' },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to add comment');
      }

      const comment = await response.json();
      setComments([comment, ...comments]);
      setNewComment('');
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Comments for {username}
        </h1>
        <form onSubmit={handleCommentSubmit} className="space-y-4">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment"
            required
            className="w-full p-2 border border-gray-300 rounded-md"
          />
          <button
            type="submit"
            className="w-full py-2 px-4 bg-indigo-600 text-white rounded-md"
          >
            Submit
          </button>
        </form>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <div className="space-y-4">
          {comments.map((comment) => (
            <div
              key={comment.id}
              className="p-4 bg-gray-100 rounded-md dark:bg-gray-700"
            >
              <p className="text-gray-700 dark:text-gray-300">
                {comment.content}
              </p>
              <small className="text-gray-500 dark:text-gray-400">
                {new Date(comment.createdAt).toLocaleString()}
              </small>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/PublicPageClient.tsx:

'use client';

import React, { useState, useEffect } from 'react';
import Wall from './Wall';
import Posts from './Posts';
import UserFriends from './Friends';
import Comments from './Comments';

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

export default function PublicPageClient({
  user,
  loggedInUserId,
}: {
  user: {
    id: number;
    username: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  loggedInUserId: number | null;
}) {
  const [posts, setPosts] = useState<PostType[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch(`/api/posts/user/${user.id}`);
        if (response.ok) {
          const userPosts = await response.json();
          setPosts(userPosts);
        } else {
          setError('Failed to fetch posts');
        }
      } catch (err) {
        setError('Failed to fetch posts');
      }
    };

    fetchPosts();
  }, [user.id]);

  return (
    <div className="w-full min-h-screen p-8 flex flex-col md:flex-row md:items-start md:space-x-8">
      <div className="w-full md:w-1/2 flex flex-col space-y-8">
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800">
          <Wall user={user} loggedInUserId={loggedInUserId} />
        </div>
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800">
          <Comments username={user.username} />
        </div>
      </div>
      <div className="w-full md:w-1/2 flex flex-col space-y-8">
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800">
          <Posts posts={posts} username={user.username} />
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/Comments.tsx:

'use client';

import React, { useState, useEffect } from 'react';

type CommentType = {
  id: number;
  profileId: number;
  userId: number;
  content: string;
  createdAt: Date;
  username: string;
  userImage: string;
};

export default function Comments({ username }: { username: string }) {
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState('');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchComments = async () => {
      try {
        const response = await fetch(`/api/profile/${username}/comments`);
        if (!response.ok) {
          throw new Error(`Error: ${response.status} ${response.statusText}`);
        }
        const profileComments = await response.json();
        setComments(profileComments);
      } catch (err) {
        if (err instanceof Error) {
          setError(`Failed to fetch comments: ${err.message}`);
        } else {
          setError('Failed to fetch comments: An unknown error occurred');
        }
      }
    };

    fetchComments();
  }, [username]);

  const handleCommentSubmit = async (
    event: React.FormEvent<HTMLFormElement>,
  ) => {
    event.preventDefault();

    try {
      const response = await fetch(`/api/profile/${username}/comments`, {
        method: 'POST',
        body: JSON.stringify({ content: newComment }),
        headers: { 'Content-Type': 'application/json' },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to add comment');
      }

      const comment = await response.json();
      setComments([comment, ...comments]);
      setNewComment('');
    } catch (err) {
      setError('Failed to add comment');
    }
  };

  return (
    <div className="w-full space-y-4">
      <h2 className="text-xl font-bold text-center text-gray-800 dark:text-white">
        Comments
      </h2>
      {!!error && <p className="text-red-500 text-center">{error}</p>}
      <div className="space-y-2">
        {comments.length === 0 ? (
          <p className="text-center text-gray-700 dark:text-gray-300">
            No comments yet
          </p>
        ) : (
          comments.map((comment) => (
            <div
              key={comment.id}
              className="p-4 bg-gray-100 rounded-md dark:bg-gray-700"
            >
              <p className="text-gray-700 dark:text-gray-300">
                {comment.content}
              </p>
              <small className="text-gray-500 dark:text-gray-400">
                {new Date(comment.createdAt).toLocaleString()} by{' '}
                <a
                  href={`/profile/${comment.username}/public`}
                  className="text-sky-700 dark:text-sky-600 hover:text-sky-800"
                >
                  {comment.username}
                </a>
              </small>
            </div>
          ))
        )}
      </div>
      <form onSubmit={handleCommentSubmit} className="space-y-4 mt-4">
        <div className="flex justify-center w-full">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment"
            required
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div className="flex justify-center">
          <button
            type="submit"
            className="w-0.5/2 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
          >
            Submit
          </button>
        </div>
      </form>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/Wall.tsx:

'use client';

import React, { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { getCityAndCountry } from '../../../../../util/geocode';
import { CldImage } from 'next-cloudinary';

const Map = dynamic(() => import('../../../../components/MapComponent'), {
  ssr: false,
});

type LocationType = {
  city: string;
  country: string;
};

export default function Wall({
  user,
  loggedInUserId,
}: {
  user: {
    id: number;
    username: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  loggedInUserId: number | null;
}) {
  const [location, setLocation] = useState<LocationType | null>(null);
  const [isFollowing, setIsFollowing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (user.location) {
      getCityAndCountry(user.location.y, user.location.x)
        .then((loc) => setLocation(loc))
        .catch((err) => setError('Failed to fetch location data'));
    }
  }, [user.location]);

  useEffect(() => {
    const checkIfFollowing = async () => {
      if (loggedInUserId) {
        const response = await fetch(
          `/api/follows?followerId=${loggedInUserId}&followedId=${user.id}`,
        );
        const result = await response.json();
        setIsFollowing(result.isFollowing);
      }
    };

    checkIfFollowing();
  }, [loggedInUserId, user.id]);

  const handleFollow = async () => {
    await fetch('/api/follows', {
      method: isFollowing ? 'DELETE' : 'POST',
      body: JSON.stringify({ followerId: loggedInUserId, followedId: user.id }),
      headers: { 'Content-Type': 'application/json' },
    });

    setIsFollowing(!isFollowing);
  };

  return (
    <div className="w-full space-y-4">
      <h1 className="text-xl font-bold text-center text-gray-800 dark:text-white">
        Profile of{' '}
        <span className="bg-text-sky-600 dark:bg-text-sky-600">
          {user.username}
        </span>
      </h1>
      <div className="flex justify-center items-center mx-auto">
        {user.userImage && user.userImage.startsWith('http') ? (
          <CldImage
            src={user.userImage}
            width="150"
            height="150"
            crop="fill"
            alt="User profile image"
            style={{ borderRadius: '50%' }}
          />
        ) : (
          <span className="text-9xl">{user.userImage}</span>
        )}
      </div>

      <div className="flex justify-center space-x-4">
        {!!user.fullName && user.fullName.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            <span className="text-sky-700 font-bold dark:text-sky-600">
              Full Name:{' '}
            </span>
            {user.fullName}
          </p>
        )}
        {!!user.profileLinks && user.profileLinks.trim() !== 'null' && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            <span className="text-sky-700 font-bold dark:text-sky-600">
              Profile Links:{' '}
            </span>
            {user.profileLinks}
          </p>
        )}
      </div>

      {!!user.description && (
        <p className="text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 p-4 rounded-lg">
          {user.description}
        </p>
      )}

      {!!user.interests && user.interests.trim() !== 'null' && (
        <div className="text-center text-gray-700 dark:text-gray-300">
          {user.interests.split(',').map((interest) => (
            <span
              key={`interest-${interest}`}
              className="inline-block bg-orange-100 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2"
            >
              {interest}
            </span>
          ))}
        </div>
      )}

      <div className="flex justify-center space-x-4">
        {!!user.location && (
          <div className="w-full">
            {!!location && (
              <p className="text-center text-gray-700 dark:text-gray-300">
                <span className="text-sky-800 font-bold dark:text-sky-600">
                  Location:{' '}
                </span>
                {location.city}, {location.country}
              </p>
            )}
          </div>
        )}
      </div>

      {!!user.birthdate && user.birthdate.trim() !== 'null' && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-800 font-bold dark:text-sky-600">
            Birthdate:{' '}
          </span>
          {user.birthdate}
        </p>
      )}
      {!!user.profession && user.profession.trim() !== 'null' && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-800 font-bold dark:text-sky-600">
            Profession:{' '}
          </span>
          {user.profession}
        </p>
      )}

      {!!loggedInUserId && loggedInUserId !== user.id && (
        <div className="flex justify-center">
          <button
            onClick={handleFollow}
            className={`w-0.5/2 h-10 px-4 text-white rounded-md ${
              isFollowing ? 'bg-red-600' : 'bg-sky-600'
            }`}
          >
            {isFollowing ? 'Unfollow' : 'Follow'}
          </button>
        </div>
      )}
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/Friends.tsx:


----------------------------------------

// src/app/profile/[username]/public/Posts.tsx:

'use client';

import React from 'react';
import Link from 'next/link';

type CategoryType = {
  id: number;
  categoryName: string;
};

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categories: CategoryType[];
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

export default function Posts({
  posts,
  username,
}: {
  posts: PostType[];
  username: string;
}) {
  return (
    <div className="w-full space-y-4">
      <h2 className="text-xl font-bold text-center text-gray-800 dark:text-white">
        {username}'s Posts
      </h2>
      <ul>
        {posts.length > 0 ? (
          posts.map((post) => (
            <li key={`post-${post.id}`} className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <Link
                  href={`/posts/${username}/${post.slug}`}
                  className="text-lg font-semibold text-sky-700 dark:text-sky-600 hover:text-sky-800"
                >
                  {post.title}
                </Link>
                {post.categories && post.categories.length > 0 && (
                  <div className="mt-2">
                    {post.categories.map((category) => (
                      <span
                        key={`category-${category.id}`}
                        className="ml-1 inline-block bg-orange-100 rounded-full px-2 py-1 text-sm font-semibold text-gray-700"
                      >
                        {category.categoryName}
                      </span>
                    ))}
                  </div>
                )}
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {post.createdAt
                    ? new Date(post.createdAt).toLocaleDateString()
                    : ''}
                </span>
              </div>
              <p className="text-gray-700 dark:text-gray-300">
                {post.content.slice(0, 100)}...
              </p>
              {posts.indexOf(post) < posts.length - 1 && (
                <hr className="border-t mt-4 border-gray-300 dark:border-gray-700" />
              )}
            </li>
          ))
        ) : (
          <p className="text-center text-gray-700 dark:text-gray-300">
            No posts yet
          </p>
        )}
      </ul>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getUserByUsername } from '../../../../../database/users';
import { getSessionByToken } from '../../../../../database/sessions';
import PublicPageClient from './PublicPageClient';

export default async function PublicProfilePage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  const loggedInUserId = sessionToken
    ? (await getSessionByToken(sessionToken.value))?.userId
    : null;

  const user = await getUserByUsername(username);

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">User not found</p>
      </div>
    );
  }

  const userProfile = {
    id: user.id,
    username: user.username,
    ...(user.fullName && { fullName: user.fullName }),
    ...(user.description && { description: user.description }),
    ...(user.interests && { interests: user.interests }),
    ...(user.profileLinks && { profileLinks: user.profileLinks }),
    ...(user.userImage && { userImage: user.userImage }),
    ...(user.location && { location: user.location }),
    ...(user.birthdate && { birthdate: user.birthdate.toISOString() }),
    ...(user.profession && { profession: user.profession }),
  };

  return (
    <div>
      <PublicPageClient
        user={userProfile}
        loggedInUserId={loggedInUserId ?? null}
      />
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/following/FollowingList.tsx:

'use client';

import React, { ReactNode } from 'react';

type UserType = {
  email: ReactNode;
  id: number;
  username: string;
  userImage: string | null;
};

type FollowingListProps = {
  following: UserType[];
  error: string | null;
};

const FollowingList: React.FC<FollowingListProps> = ({ following, error }) => {
  return (
    <div className="flex items-center justify-center mt-20 mb-20 bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-xl font-bold text-center text-gray-900 dark:text-white">
          Users You Follow
        </h1>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <ul>
          {following.length > 0 ? (
            following.map((user) => (
              <li
                key={`user-${user.id}`}
                className="flex items-center space-x-4 mb-4"
              >
                <div className="h-15 w-15 rounded-full">{user.userImage}</div>
                <div>
                  <p className="text-lg font-medium text-gray-900 dark:text-white">
                    <a href={`/profile/${user.username}/public`}>
                      {user.username}
                    </a>
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-300">
                    {user.email}
                  </p>
                </div>
              </li>
            ))
          ) : (
            <p className="text-center text-gray-700 dark:text-gray-300">
              You are not following anyone.
            </p>
          )}
        </ul>
      </div>
    </div>
  );
};

export default FollowingList;

----------------------------------------

// src/app/profile/[username]/following/page.tsx:

'use client';

import React, { useEffect, useState } from 'react';
import FollowingList from './FollowingList';

type UserType = {
  email: React.ReactNode;
  id: number;
  username: string;
  userImage: string | null;
};

export default function FollowingPage() {
  const [following, setFollowing] = useState<UserType[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchFollowing = async () => {
      try {
        const response = await fetch('/api/following');
        if (!response.ok) {
          throw new Error('Failed to fetch following users');
        }
        const data = await response.json();
        setFollowing(data);
      } catch (error: any) {
        setError(error.message);
      }
    };

    fetchFollowing();
  }, []);

  return <FollowingList following={following} error={error} />;
}

----------------------------------------

// src/app/profile/[username]/[slug]/UserFriends.tsx:

'use client';

import React from 'react';
import dynamic from 'next/dynamic';

interface MapProps {
  latitude: number;
  longitude: number;
  height: string;
}

const MapComponent = dynamic(
  () => import('../../../../components/MapComponent'),
  {
    ssr: false,
  },
);

async function fetchFriends(userId: number) {
  const response = await fetch(`/api/friends?userId=${userId}`);
  if (!response.ok) {
    throw new Error('Failed to fetch friends');
  }
  const data = await response.json();
  return data;
}

export default function UserFriends({
  user,
}: {
  user: {
    id: number;
    username: string;
    location?: { x: number; y: number } | null;
  };
}) {
  const [friends, setFriends] = React.useState<
    { id: number; username: string; location: string }[]
  >([]);

  React.useEffect(() => {
    fetchFriends(user.id).then(setFriends).catch(console.error);
  }, [user.id]);

  return (
    <div className="w-full space-y-6">
      <h2 className="text-xl font-bold text-center text-gray-800 dark:text-white">
        My Friends
      </h2>
      <div className="flex space-x-4 justify-center">
        <button
          onClick={() =>
            (window.location.href = `/profile/${user.username}/following`)
          }
          className="flex justify-center py-2 px-6 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
        >
          Followed Friends
        </button>
        <button
          onClick={() =>
            (window.location.href = `/profile/${user.username}/followers`)
          }
          className="flex justify-center py-2 px-6 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
        >
          My Followers
        </button>
      </div>

      <h3 className="text-lg text-center text-sky-700 font-bold dark:text-sky-600">
        Nearby friends
      </h3>
      {!!user.location && (
        <div className="w-full h-96 mt-4 rounded-lg overflow-hidden">
          <MapComponent
            latitude={user.location.y || 0}
            longitude={user.location.x || 0}
            markers={friends}
          />
        </div>
      )}
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/UserPosts.tsx:

'use client';

import React from 'react';
import Link from 'next/link';

type CategoryType = {
  id: number;
  categoryName: string;
};

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categories: CategoryType[];
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

export default function UserPosts({
  user,
  posts,
  handleNewPost,
}: {
  user: { username: string };
  posts: PostType[];
  handleNewPost: () => void;
}) {
  return (
    <div className="w-full space-y-4">
      <h2 className="text-xl font-bold text-center text-gray-800 dark:text-white">
        My Posts
      </h2>
      <ul>
        {posts.length > 0 ? (
          posts.map((post, index) => (
            <li key={`post-${post.id}`} className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <Link
                  href={`/posts/${user.username}/${post.slug}`}
                  className="text-lg font-semibold text-sky-700 dark:text-sky-600 hover:text-sky-800"
                >
                  {post.title}
                </Link>
                {post.categories && post.categories.length > 0 && (
                  <div className="mt-2">
                    {post.categories.map((category) => (
                      <span
                        key={`category-${category.id}`}
                        className="ml-1 inline-block bg-orange-100 rounded-full px-2 py-1 text-sm font-semibold text-gray-700"
                      >
                        {category.categoryName}
                      </span>
                    ))}
                  </div>
                )}
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {post.createdAt
                    ? new Date(post.createdAt).toLocaleDateString()
                    : ''}
                </span>
              </div>
              <p className="text-gray-700 dark:text-gray-300">
                {post.content.slice(0, 100)}...
              </p>
              {index < posts.length - 1 && (
                <hr className="border-t mt-4 border-gray-300 dark:border-gray-700" />
              )}
            </li>
          ))
        ) : (
          <p className="text-center text-gray-700 dark:text-gray-300">
            No posts yet
          </p>
        )}
      </ul>

      <div className="flex justify-center">
        <button
          onClick={handleNewPost}
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-emerald-500 hover:bg-emerald-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          Add New Post
        </button>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/UserProfile.tsx:

'use client';
import { CldImage } from 'next-cloudinary';
import React from 'react';

export default function UserProfile({
  user,
  location,
  error,
  handleLogout,
}: {
  user: {
    id: number;
    username: string;
    email: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  location: { city: string; country: string } | null;
  error: string | null;
  handleLogout: () => void;
}) {
  return (
    <div className="w-full space-y-4">
      <h2 className="text-xl font-bold text-center text-gray-800 dark:text-white">
        My Info
      </h2>
      <div className="flex justify-center items-center mx-auto">
        {user.userImage && user.userImage.startsWith('http') ? (
          <CldImage
            src={user.userImage}
            width="150"
            height="150"
            crop="fill"
            alt="User profile image"
            style={{ borderRadius: '50%' }}
          />
        ) : (
          <span className="text-9xl">{user.userImage}</span>
        )}
      </div>

      <div className="flex justify-center space-x-4">
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-700 font-bold dark:text-sky-600">
            Username:{' '}
          </span>
          {user.username}
        </p>
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-700 font-bold dark:text-sky-600">
            Email:{' '}
          </span>
          {user.email}
        </p>
      </div>
      <div className="flex justify-center space-x-4">
        {!!user.fullName && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            <span className="text-sky-700 font-bold dark:text-sky-600">
              Full Name:{' '}
            </span>
            {user.fullName}
          </p>
        )}
        {!!user.profileLinks && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            <span className="text-sky-700 font-bold dark:text-sky-600">
              Profile Links:{' '}
            </span>
            {user.profileLinks}
          </p>
        )}
      </div>

      {!!user.description && (
        <p className="text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700  p-4 rounded-lg">
          {/* <span className="text-sky-800 font-bold dark:text-sky-600">
            Description:{' '}
          </span> */}
          {user.description}
        </p>
      )}

      {!!user.interests && (
        <div className="text-center text-gray-700 dark:text-gray-300">
          {user.interests.split(',').map((interest) => (
            <span
              key={`interest-${interest}`}
              className="inline-block bg-orange-100 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2"
            >
              {interest}
            </span>
          ))}
        </div>
      )}

      <div className="flex justify-center space-x-4">
        {!!location && (
          <p className="text-center text-gray-700 dark:text-gray-300">
            <span className="text-sky-700 font-bold dark:text-sky-600">
              Location:{' '}
            </span>
            {location.city}, {location.country}
          </p>
        )}
      </div>

      {!!user.birthdate && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-700 font-bold dark:text-sky-600">
            Birthdate:{' '}
          </span>
          {user.birthdate}
        </p>
      )}
      {!!user.profession && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-700 font-bold dark:text-sky-600">
            Profession:{' '}
          </span>
          {user.profession}
        </p>
      )}
      {!!error && <p className="text-red-500 text-center">{error}</p>}
      <div className="flex space-x-4 justify-center">
        <button
          onClick={() =>
            (window.location.href = `/profile/${user.username}/edit`)
          }
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
        >
          Edit Profile
        </button>
        <button
          onClick={handleLogout}
          className="flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Sign Out
        </button>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/PrivatePageClient.tsx:

'use client';

import React, { useState, useEffect } from 'react';
import { getCityAndCountry } from '../../../../../util/geocode';
import UserProfile from './UserProfile';
import UserPosts from './UserPosts';
import UserFriends from './UserFriends';
import UserComments from './UserComments';

type CategoryType = {
  id: number;
  categoryName: string;
};

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categories: CategoryType[];
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

type LocationType = {
  city: string;
  country: string;
};

export default function PrivatePageClient({
  user,
  loggedInUserId,
}: {
  user: {
    id: number;
    username: string;
    email: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  loggedInUserId: number | null;
}) {
  const [error, setError] = useState<string | null>(null);
  const [posts, setPosts] = useState<PostType[]>([]);
  const [location, setLocation] = useState<LocationType | null>(null);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch(`/api/posts/user/${user.id}`);
        if (response.ok) {
          const userPosts = await response.json();
          setPosts(userPosts);
        } else {
          setError('Failed to fetch posts');
        }
      } catch (err) {
        setError('Failed to fetch posts');
      }
    };

    fetchPosts();
  }, [user.id]);

  useEffect(() => {
    if (user.location) {
      getCityAndCountry(user.location.y, user.location.x)
        .then((loc) => setLocation(loc))
        .catch((err) => setError('Failed to fetch location data'));
    }
  }, [user.location]);

  async function handleLogout() {
    const response = await fetch('/api/logout', {
      method: 'POST',
    });

    if (response.ok) {
      window.location.href = '/login'; // Redirect to login page after logout
    } else {
      setError('Failed to log out');
    }
  }

  function handleNewPost() {
    window.location.href = `/posts/${user.username}/new`;
  }

  return (
    <div className="w-full min-h-screen p-8 flex flex-col md:flex-row items-start space-y-8 md:space-y-0 md:space-x-8">
      <div className="w-full md:w-1/2 flex flex-col space-y-8">
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800 flex justify-center">
          <UserProfile
            user={user}
            location={location}
            error={error}
            handleLogout={handleLogout}
          />
        </div>
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800 flex justify-center">
          <UserComments userId={user.id} username={user.username} />
        </div>
      </div>
      <div className="w-full md:w-1/2 flex flex-col space-y-8">
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800 flex justify-center">
          <UserPosts user={user} posts={posts} handleNewPost={handleNewPost} />
        </div>
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800 flex justify-center">
          <UserFriends user={user} />
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getUserByUsername } from '../../../../../database/users';
import { getSessionByToken } from '../../../../../database/sessions';
import PrivatePageClient from './PrivatePageClient';
import Link from 'next/link';

export default async function ProfilePage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  if (!sessionToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const session = await getSessionByToken(sessionToken.value);
  const loggedInUserId = session ? session.userId : null;

  if (!session) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">You are not logged in</p>
      </div>
    );
  }

  const user = await getUserByUsername(username);

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">User not found</p>
      </div>
    );
  }

  if (session.userId !== user.id) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">Access denied</p>
      </div>
    );
  }

  const userProfile = {
    id: user.id,
    username: user.username,
    email: user.email,
    ...(user.fullName && { fullName: user.fullName }),
    ...(user.description && { description: user.description }),
    ...(user.interests && { interests: user.interests }),
    ...(user.profileLinks && { profileLinks: user.profileLinks }),
    ...(user.userImage && { userImage: user.userImage }),
    ...(user.location && { location: user.location }),
    ...(user.birthdate && { birthdate: user.birthdate.toISOString() }),
    ...(user.profession && { profession: user.profession }),
  };

  return (
    <div>
      <PrivatePageClient user={userProfile} loggedInUserId={loggedInUserId} />
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/[slug]/UserComments.tsx:

'use client';

import React, { useState, useEffect } from 'react';

type CommentType = {
  id: number;
  profileId: number;
  userId: number;
  content: string;
  createdAt: Date;
  username: string;
  userImage: string;
};

export default function UserComments({
  userId,
  username,
}: {
  userId: number;
  username: string;
}) {
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState('');
  const [fetchError, setFetchError] = useState<string | null>(null);

  useEffect(() => {
    const fetchComments = async () => {
      try {
        const response = await fetch(`/api/profile/${username}/comments`);
        if (response.ok) {
          const profileComments = await response.json();
          setComments(profileComments);
        } else {
          setFetchError('Failed to fetch comments');
        }
      } catch (err) {
        setFetchError('Failed to fetch comments');
      }
    };

    fetchComments();
  }, [username]);

  const handleCommentSubmit = async (
    event: React.FormEvent<HTMLFormElement>,
  ) => {
    event.preventDefault();

    try {
      const response = await fetch(`/api/profile/${username}/comments`, {
        method: 'POST',
        body: JSON.stringify({ content: newComment }),
        headers: { 'Content-Type': 'application/json' },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to add comment');
      }

      const comment = await response.json();
      setComments([comment, ...comments]);
      setNewComment('');
    } catch (err: any) {
      setFetchError(err.message);
    }
  };

  return (
    <div className="w-full space-y-4">
      <h2 className="text-xl font-bold text-center text-gray-800 dark:text-white">
        My Wall
      </h2>
      <div className="space-y-2">
        {comments.length === 0 ? (
          <p className="text-center text-gray-700 dark:text-gray-300">
            No comments yet
          </p>
        ) : (
          comments.map((comment) => (
            <div
              key={comment.id}
              className="p-4 bg-gray-100 rounded-md dark:bg-gray-700"
            >
              <p className="text-gray-700 dark:text-gray-300">
                {comment.content}
              </p>
              <small className="text-gray-500 dark:text-gray-400">
                {new Date(comment.createdAt).toLocaleString()} by{' '}
                <a
                  href={`/profile/${comment.username}/public`}
                  className="text-sky-700 font-bold dark:text-sky-600 hover:text-sky-800"
                >
                  {comment.username}
                </a>
              </small>
            </div>
          ))
        )}
      </div>
      <form onSubmit={handleCommentSubmit} className="space-y-4 mt-4">
        <div className="flex justify-center w-full">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment"
            required
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div className="flex justify-center">
          <button
            type="submit"
            className="w-0.5/2 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
          >
            Submit
          </button>
        </div>
      </form>
    </div>
  );
}

----------------------------------------

