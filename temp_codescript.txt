// migrations/00000-createUsersTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql` CREATE EXTENSION if NOT EXISTS postgis; `;

  await sql`
    CREATE TABLE users (
      id serial PRIMARY KEY,
      username varchar(255) NOT NULL UNIQUE,
      email varchar(255) NOT NULL UNIQUE,
      password_hash varchar(255) NOT NULL,
      profile_id serial UNIQUE,
      full_name text,
      description text,
      interests text,
      profile_links text,
      user_image varchar(255) NOT NULL,
      location geometry (POINT, 4326),
      birthdate date,
      profession text,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP,
      slug varchar(255) NOT NULL UNIQUE
    )
  `;

  await sql`
    CREATE
    OR REPLACE function update_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_users_updated_at before
    UPDATE ON users FOR each ROW
    EXECUTE function update_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_users_updated_at ON users`;
  await sql`DROP FUNCTION if EXISTS update_updated_at_column`;
  await sql`DROP TABLE IF EXISTS users`;
  await sql`DROP EXTENSION if EXISTS postgis`;
}

----------------------------------------

// migrations/00001-createSessionsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE sessions (
      id serial PRIMARY KEY,
      user_id int NOT NULL REFERENCES users (id),
      token varchar(255) NOT NULL,
      created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
      expires_at timestamp NOT NULL
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE sessions`;
}

----------------------------------------

// migrations/00002-createFollowsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE follows (
      id serial PRIMARY KEY,
      follower_id int NOT NULL REFERENCES users (id),
      followed_id int NOT NULL REFERENCES users (id),
      created_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE follows`;
}

----------------------------------------

// migrations/00003-createCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE comments (
      id serial PRIMARY KEY,
      post_id int NOT NULL REFERENCES posts (id) ON DELETE cascade,
      user_id int NOT NULL REFERENCES users (id) ON DELETE cascade,
      content text NOT NULL,
      created_at timestamp DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP
    )
  `;

  await sql`
    CREATE
    OR REPLACE function update_comments_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_comments_updated_at before
    UPDATE ON comments FOR each ROW
    EXECUTE procedure update_comments_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_comments_updated_at ON comments`;
  await sql`DROP FUNCTION if EXISTS update_comments_updated_at_column`;
  await sql`DROP TABLE comments`;
}

----------------------------------------

// migrations/00004-createPostsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts (
      id serial PRIMARY KEY,
      user_id int NOT NULL REFERENCES users (id),
      icon varchar(1),
      title varchar(255) NOT NULL,
      content text NOT NULL,
      category_id bigint,
      created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at timestamp DEFAULT CURRENT_TIMESTAMP,
      slug varchar(255) NOT NULL UNIQUE
    )
  `;

  await sql`
    CREATE
    OR REPLACE function update_posts_updated_at_column () returns trigger AS $$
    BEGIN
      NEW.updated_at = NOW();
      RETURN NEW;
    END;
    $$ language 'plpgsql';
  `;

  await sql`
    CREATE TRIGGER update_posts_updated_at before
    UPDATE ON posts FOR each ROW
    EXECUTE procedure update_posts_updated_at_column ();
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TRIGGER if EXISTS update_posts_updated_at ON posts`;
  await sql`DROP FUNCTION if EXISTS update_posts_updated_at_column`;
  await sql`DROP TABLE posts`;
}

----------------------------------------

// migrations/00005-createcategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE categories (
      id serial PRIMARY KEY,
      category_name varchar(255) NOT NULL UNIQUE,
      description text
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE categories`;
}

----------------------------------------

// migrations/00006-createPostsCategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts_categories (
      id serial PRIMARY KEY,
      post_id int NOT NULL REFERENCES posts (id),
      category_id int NOT NULL REFERENCES categories (id)
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE posts_categories`;
}

----------------------------------------

// migrations/00007-createUsersCategoriesTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE users_categories (
      id serial PRIMARY KEY,
      user_id int NOT NULL REFERENCES users (id),
      category_id int NOT NULL REFERENCES categories (id)
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE users_categories`;
}

----------------------------------------

// migrations/00008-createProfilesCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE profiles_comments (
      id serial PRIMARY KEY,
      profile_id int NOT NULL REFERENCES users (profile_id),
      comment_id int NOT NULL REFERENCES comments (id),
      commenter_id int NOT NULL REFERENCES users (id)
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE profiles_comments`;
}

----------------------------------------

// migrations/00009-createPostsCommentsTable.ts:

import { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE posts_comments (
      id serial PRIMARY KEY,
      profile_id bigint NOT NULL REFERENCES posts (id),
      comment_id bigint NOT NULL REFERENCES comments (id),
      commenter_id bigint NOT NULL REFERENCES users (id)
    )
  `;
}

export async function down(sql: Sql) {
  await sql`DROP TABLE posts_comments`;
}

----------------------------------------

