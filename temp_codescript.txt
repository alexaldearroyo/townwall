// src/app/profile/[username]/public/Comments.tsx:

'use client';

import React, { useState, useEffect } from 'react';

type CommentType = {
  id: number;
  profileId: number;
  userId: number;
  content: string;
  createdAt: Date;
  username: string;
  userImage: string;
};

export default function Comments({ username }: { username: string }) {
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState('');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchComments = async () => {
      try {
        const response = await fetch(`/api/profile/${username}/comments`);
        if (!response.ok) {
          throw new Error(`Error: ${response.status} ${response.statusText}`);
        }
        const profileComments = await response.json();
        setComments(profileComments);
      } catch (err) {
        if (err instanceof Error) {
          setError(`Failed to fetch comments: ${err.message}`);
        } else {
          setError('Failed to fetch comments: An unknown error occurred');
        }
      }
    };

    fetchComments();
  }, [username]);

  const handleCommentSubmit = async (
    event: React.FormEvent<HTMLFormElement>,
  ) => {
    event.preventDefault();

    try {
      const response = await fetch(`/api/profile/${username}/comments`, {
        method: 'POST',
        body: JSON.stringify({ content: newComment }),
        headers: { 'Content-Type': 'application/json' },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to add comment');
      }

      const comment = await response.json();
      setComments([comment, ...comments]);
      setNewComment('');
    } catch (err) {
      setError('Failed to add comment');
    }
  };

  return (
    <div className="w-full space-y-6">
      <h2 className="text-xl font-bold text-center text-gray-900 dark:text-white mt-8">
        Comments
      </h2>
      {!!error && <p className="text-red-500 text-center">{error}</p>}
      <div className="space-y-2">
        {comments.length === 0 ? (
          <p className="text-center text-gray-700 dark:text-gray-300">
            No comments yet
          </p>
        ) : (
          comments.map((comment) => (
            <div
              key={comment.id}
              className="p-4 bg-gray-100 rounded-md dark:bg-gray-700"
            >
              <p className="text-gray-700 dark:text-gray-300">
                {comment.content}
              </p>
              <small className="text-gray-500 dark:text-gray-400">
                {new Date(comment.createdAt).toLocaleString()} by{' '}
                <a
                  href={`/profile/${comment.username}/public`}
                  className="text-blue-700 dark:text-sky-600 hover:text-indigo-800"
                >
                  {comment.username}
                </a>
              </small>
            </div>
          ))
        )}
      </div>
      <form onSubmit={handleCommentSubmit} className="space-y-4 mt-4">
        <div className="flex justify-center w-full">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment"
            required
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        <div className="flex justify-center">
          <button
            type="submit"
            className="w-0.5/2 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500"
          >
            Submit
          </button>
        </div>
      </form>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/Posts.tsx:

'use client';

import React from 'react';
import Link from 'next/link';

type CategoryType = {
  id: number;
  categoryName: string;
};

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categories: CategoryType[];
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

export default function Posts({
  posts,
  username,
}: {
  posts: PostType[];
  username: string;
}) {
  return (
    <div className="w-full space-y-6">
      <h2 className="text-xl font-bold text-center text-gray-900 dark:text-white">
        {username}'s Posts
      </h2>
      <ul>
        {posts.length > 0 ? (
          posts.map((post) => (
            <li key={`post-${post.id}`} className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <Link
                  href={`/posts/${username}/${post.slug}`}
                  className="text-xl font-semibold text-blue-700 dark:text-blue-400 hover:text-indigo-800"
                >
                  {post.title}
                </Link>
                {post.categories && post.categories.length > 0 && (
                  <div className="mt-2">
                    {post.categories.map((category) => (
                      <span
                        key={`category-${category.id}`}
                        className="ml-1 inline-block bg-amber-300 rounded-full px-2 py-1 text-sm font-semibold text-gray-700"
                      >
                        {category.categoryName}
                      </span>
                    ))}
                  </div>
                )}
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {post.createdAt
                    ? new Date(post.createdAt).toLocaleDateString()
                    : ''}
                </span>
              </div>
              <p className="text-gray-700 dark:text-gray-300">
                {post.content.slice(0, 100)}...
              </p>
            </li>
          ))
        ) : (
          <p className="text-center text-gray-700 dark:text-gray-300">
            No posts yet
          </p>
        )}
      </ul>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/PublicPageClient.tsx:

'use client';

import React, { useState, useEffect } from 'react';
import Wall from './Wall';
import Posts from './Posts';
import Comments from './Comments'; // Importa el componente Comments

type PostType = {
  id: number;
  userId: number;
  icon: string | null;
  title: string;
  content: string;
  categoryId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  slug: string;
};

export default function PublicPageClient({
  user,
  loggedInUserId,
}: {
  user: {
    id: number;
    username: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  loggedInUserId: number | null;
}) {
  const [posts, setPosts] = useState<PostType[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch(`/api/posts/user/${user.id}`);
        if (response.ok) {
          const userPosts = await response.json();
          setPosts(userPosts);
        } else {
          setError('Failed to fetch posts');
        }
      } catch (err) {
        setError('Failed to fetch posts');
      }
    };

    fetchPosts();
  }, [user.id]);

  return (
    <div className="w-full min-h-screen p-8 flex flex-col md:flex-row items-start space-y-8 md:space-y-0 md:space-x-8">
      <div className="w-full md:w-1/2 flex flex-col space-y-8">
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800 flex flex-col items-center space-y-8">
          <Wall user={user} loggedInUserId={loggedInUserId} />
        </div>
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800 flex justify-center">
          <Comments username={user.username} />{' '}
        </div>
      </div>
      <div className="w-full md:w-1/2 flex flex-col space-y-8">
        <div className="w-full p-8 bg-white rounded-lg shadow dark:bg-gray-800 flex justify-center">
          <Posts posts={posts} username={user.username} />
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/Wall.tsx:

'use client';

import React, { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { getCityAndCountry } from '../../../../../util/geocode';
import { CldImage } from 'next-cloudinary';

const Map = dynamic(() => import('../../../../components/MapComponent'), {
  ssr: false,
});

type LocationType = {
  city: string;
  country: string;
};

export default function Wall({
  user,
  loggedInUserId,
}: {
  user: {
    id: number;
    username: string;
    fullName?: string;
    description?: string;
    interests?: string;
    profileLinks?: string;
    userImage?: string;
    location?: { x: number; y: number } | null;
    birthdate?: string;
    profession?: string;
  };
  loggedInUserId: number | null;
}) {
  const [location, setLocation] = useState<LocationType | null>(null);
  const [isFollowing, setIsFollowing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (user.location) {
      getCityAndCountry(user.location.y, user.location.x)
        .then((loc) => setLocation(loc))
        .catch((err) => setError('Failed to fetch location data'));
    }
  }, [user.location]);

  useEffect(() => {
    const checkIfFollowing = async () => {
      if (loggedInUserId) {
        const response = await fetch(
          `/api/follows?followerId=${loggedInUserId}&followedId=${user.id}`,
        );
        const result = await response.json();
        setIsFollowing(result.isFollowing);
      }
    };

    checkIfFollowing();
  }, [loggedInUserId, user.id]);

  const handleFollow = async () => {
    await fetch('/api/follows', {
      method: isFollowing ? 'DELETE' : 'POST',
      body: JSON.stringify({ followerId: loggedInUserId, followedId: user.id }),
      headers: { 'Content-Type': 'application/json' },
    });

    setIsFollowing(!isFollowing);
  };

  return (
    <div className="w-full space-y-6">
      <h1 className="text-xl font-bold text-center text-gray-900 dark:text-white">
        {user.username}'s Wall
      </h1>
      <div className="flex justify-center items-center mx-auto">
        {user.userImage && user.userImage.startsWith('http') ? (
          <CldImage
            src={user.userImage}
            width="150"
            height="150"
            crop="fill"
            alt="User profile image"
            style={{ borderRadius: '50%' }}
          />
        ) : (
          <span className="text-9xl">{user.userImage}</span>
        )}
      </div>
      {!!user.fullName && user.fullName.trim() !== 'null' && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-800 font-bold dark:text-sky-600">
            Full Name:{' '}
          </span>
          {user.fullName}
        </p>
      )}
      {!!user.description && user.description.trim() !== 'null' && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-800 font-bold dark:text-sky-600">
            Description:{' '}
          </span>
          {user.description}
        </p>
      )}
      {!!user.interests && user.interests.trim() !== 'null' && (
        <div className="text-center text-gray-700 dark:text-gray-300">
          {user.interests.split(',').map((interest) => (
            <span
              key={`interest-${interest}`}
              className="inline-block bg-amber-300 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2"
            >
              {interest}
            </span>
          ))}
        </div>
      )}
      {!!user.profileLinks && user.profileLinks.trim() !== 'null' && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-800 font-bold dark:text-sky-600">
            Links:{' '}
          </span>
          {user.profileLinks}
        </p>
      )}
      {!!user.location && (
        <div className="w-full">
          {!!location && (
            <p className="text-center text-gray-700 dark:text-gray-300">
              <span className="text-sky-800 font-bold dark:text-sky-600">
                Location:{' '}
              </span>
              {location.city}, {location.country}
            </p>
          )}
        </div>
      )}
      {!!user.birthdate && user.birthdate.trim() !== 'null' && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-800 font-bold dark:text-sky-600">
            Birthdate:{' '}
          </span>
          {user.birthdate}
        </p>
      )}
      {!!user.profession && user.profession.trim() !== 'null' && (
        <p className="text-center text-gray-700 dark:text-gray-300">
          <span className="text-sky-800 font-bold dark:text-sky-600">
            Profession:{' '}
          </span>
          {user.profession}
        </p>
      )}
      {!!loggedInUserId && loggedInUserId !== user.id && (
        <div className="flex justify-center">
          <button
            onClick={handleFollow}
            className={`w-0.5/2 h-10 px-4 text-white rounded-md ${
              isFollowing ? 'bg-red-600' : 'bg-sky-600'
            }`}
          >
            {isFollowing ? 'Unfollow' : 'Follow'}
          </button>
        </div>
      )}
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/comments/page.tsx:

'use client';

import React, { useState, useEffect } from 'react';

type CommentType = {
  id: number;
  profileId: number;
  userId: number;
  content: string;
  createdAt: Date;
  username: string;
  userImage: string;
};

export default function CommentsPage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [profileId, setProfileId] = useState<number | null>(null);

  useEffect(() => {
    const fetchUserAndComments = async () => {
      try {
        const userResponse = await fetch(`/api/users/username/${username}`);
        const user = await userResponse.json();
        setProfileId(user.id);

        const commentsResponse = await fetch(
          `/api/profile/comments?profileId=${user.id}`,
        );
        const commentsData = await commentsResponse.json();
        setComments(commentsData);
      } catch (err) {
        setError('Failed to fetch comments or user');
      }
    };

    fetchUserAndComments();
  }, [username]);

  const handleCommentSubmit = async (
    event: React.FormEvent<HTMLFormElement>,
  ) => {
    event.preventDefault();

    if (!profileId) {
      setError('Profile ID is not set');
      return;
    }

    try {
      const response = await fetch('/api/profile/comments', {
        method: 'POST',
        body: JSON.stringify({ profileId, content: newComment }),
        headers: { 'Content-Type': 'application/json' },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to add comment');
      }

      const comment = await response.json();
      setComments([comment, ...comments]);
      setNewComment('');
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow dark:bg-gray-800">
        <h1 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
          Comments for {username}
        </h1>
        <form onSubmit={handleCommentSubmit} className="space-y-4">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment"
            required
            className="w-full p-2 border border-gray-300 rounded-md"
          />
          <button
            type="submit"
            className="w-full py-2 px-4 bg-indigo-600 text-white rounded-md"
          >
            Submit
          </button>
        </form>
        {!!error && <p className="text-red-500 text-center">{error}</p>}
        <div className="space-y-4">
          {comments.map((comment) => (
            <div
              key={comment.id}
              className="p-4 bg-gray-100 rounded-md dark:bg-gray-700"
            >
              <p className="text-gray-700 dark:text-gray-300">
                {comment.content}
              </p>
              <small className="text-gray-500 dark:text-gray-400">
                {new Date(comment.createdAt).toLocaleString()}
              </small>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/profile/[username]/public/page.tsx:

import React from 'react';
import { cookies } from 'next/headers';
import { getUserByUsername } from '../../../../../database/users';
import { getSessionByToken } from '../../../../../database/sessions';
import PublicPageClient from './PublicPageClient';

export default async function PublicProfilePage({
  params,
}: {
  params: { username: string };
}) {
  const { username } = params;
  const cookieStore = cookies();
  const sessionToken = cookieStore.get('session');

  const loggedInUserId = sessionToken
    ? (await getSessionByToken(sessionToken.value))?.userId
    : null;

  const user = await getUserByUsername(username);

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900">
        <p className="text-xl text-red-500">User not found</p>
      </div>
    );
  }

  const userProfile = {
    id: user.id,
    username: user.username,
    ...(user.fullName && { fullName: user.fullName }),
    ...(user.description && { description: user.description }),
    ...(user.interests && { interests: user.interests }),
    ...(user.profileLinks && { profileLinks: user.profileLinks }),
    ...(user.userImage && { userImage: user.userImage }),
    ...(user.location && { location: user.location }),
    ...(user.birthdate && { birthdate: user.birthdate.toISOString() }),
    ...(user.profession && { profession: user.profession }),
  };

  return (
    <div>
      <PublicPageClient
        user={userProfile}
        loggedInUserId={loggedInUserId ?? null}
      />
    </div>
  );
}

----------------------------------------

