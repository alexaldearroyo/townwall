// src/app/(auth)/register/page.tsx:

// src/app/(auth)/api/register/route.ts

import { NextApiRequest, NextApiResponse } from 'next';
import bcrypt from 'bcrypt';
import { sql } from '../../../../database/connect';
import { getUserByUsername, createUser } from '../../../../database/users';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const { username, password } = req.body;

  if (!username || !password) {
    return res
      .status(400)
      .json({ message: 'Username and password are required' });
  }

  try {
    const existingUser = await getUserByUsername(username);
    if (existingUser) {
      return res.status(409).json({ message: 'Username already taken' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await createUser(username, hashedPassword);

    return res.status(201).json({ user });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Internal server error' });
  }
}

----------------------------------------

// src/app/(auth)/api/register/route.ts:

import { NextResponse } from 'next/server';
import { createUser, getUserByUsername } from '../../../../../database/users';
import { z } from 'zod';
import type { User } from '../../../../../database/users';

type RegisterResponseBodyPost =
  | { user: User }
  | { errors: { message: string }[] };

const userSchema = z.object({
  username: z.string().min(3),
  password: z.string().min(3),
});

export async function POST(
  request: Request,
): Promise<NextResponse<RegisterResponseBodyPost>> {
  const body = await request.json();
  const result = userSchema.safeParse(body);

  if (!result.success) {
    return NextResponse.json({ errors: result.error.issues }, { status: 400 });
  }

  const existingUser = await getUserByUsername(result.data.username);

  if (existingUser) {
    return NextResponse.json(
      { errors: [{ message: 'Username already taken' }] },
      { status: 409 },
    );
  }

  const user = await createUser(result.data.username, result.data.password);

  return NextResponse.json({ user }, { status: 201 });
}

----------------------------------------

